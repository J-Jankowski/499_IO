
C:\Users\jjank\Desktop\ELEC 499\499_IO_F4\Debug\499_IO_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001560  08001560  00011560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001578  08001578  00011578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800157c  0800157c  0001157c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08001580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          000000a4  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000c4  200000c4  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008a0b  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000147e  00000000  00000000  00028a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b48  00000000  00000000  00029ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a60  00000000  00000000  0002aa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000396c  00000000  00000000  0002b488  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003794  00000000  00000000  0002edf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00032588  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003048  00000000  00000000  00032608  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001548 	.word	0x08001548

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08001548 	.word	0x08001548

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <NVIC_Init+0xc0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <NVIC_Init+0xc0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000296:	f000 fc41 	bl	8000b1c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800029a:	2100      	movs	r1, #0
 800029c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002a0:	f000 fc3c 	bl	8000b1c <RCC_APB2PeriphResetCmd>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ca:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	791b      	ldrb	r3, [r3, #4]
 80002d0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002d6:	4313      	orrs	r3, r2
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4313      	orrs	r3, r2
 80002dc:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <ADC_Init+0xa8>)
 80002ee:	4013      	ands	r3, r2
 80002f0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002fa:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000300:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	795b      	ldrb	r3, [r3, #5]
 8000306:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000308:	4313      	orrs	r3, r2
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	4313      	orrs	r3, r2
 800030e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000322:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	7d1b      	ldrb	r3, [r3, #20]
 8000328:	3b01      	subs	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	7afb      	ldrb	r3, [r7, #11]
 800032e:	4313      	orrs	r3, r2
 8000330:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000332:	7afb      	ldrb	r3, [r7, #11]
 8000334:	051b      	lsls	r3, r3, #20
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	4313      	orrs	r3, r2
 800033a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	c0fff7fd 	.word	0xc0fff7fd

08000354 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2200      	movs	r2, #0
 8000366:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2201      	movs	r2, #1
 8000384:	751a      	strb	r2, [r3, #20]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80003a0:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <ADC_CommonInit+0x48>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <ADC_CommonInit+0x4c>)
 80003aa:	4013      	ands	r3, r2
 80003ac:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003b6:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003bc:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003c2:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003c4:	68fa      	ldr	r2, [r7, #12]
 80003c6:	4313      	orrs	r3, r2
 80003c8:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80003ca:	4a04      	ldr	r2, [pc, #16]	; (80003dc <ADC_CommonInit+0x48>)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	6053      	str	r3, [r2, #4]
}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40012300 	.word	0x40012300
 80003e0:	fffc30e0 	.word	0xfffc30e0

080003e4 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d006      	beq.n	8000430 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	f043 0201 	orr.w	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800042e:	e005      	b.n	800043c <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	f023 0201 	bic.w	r2, r3, #1
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	609a      	str	r2, [r3, #8]
  }
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	4608      	mov	r0, r1
 8000452:	4611      	mov	r1, r2
 8000454:	461a      	mov	r2, r3
 8000456:	4603      	mov	r3, r0
 8000458:	70fb      	strb	r3, [r7, #3]
 800045a:	460b      	mov	r3, r1
 800045c:	70bb      	strb	r3, [r7, #2]
 800045e:	4613      	mov	r3, r2
 8000460:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	2b09      	cmp	r3, #9
 800046e:	d923      	bls.n	80004b8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000476:	78fb      	ldrb	r3, [r7, #3]
 8000478:	f1a3 020a 	sub.w	r2, r3, #10
 800047c:	4613      	mov	r3, r2
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	4413      	add	r3, r2
 8000482:	2207      	movs	r2, #7
 8000484:	fa02 f303 	lsl.w	r3, r2, r3
 8000488:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	43db      	mvns	r3, r3
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	4013      	ands	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000494:	7879      	ldrb	r1, [r7, #1]
 8000496:	78fb      	ldrb	r3, [r7, #3]
 8000498:	f1a3 020a 	sub.w	r2, r3, #10
 800049c:	4613      	mov	r3, r2
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	4413      	add	r3, r2
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	4313      	orrs	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	e01e      	b.n	80004f6 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80004be:	78fa      	ldrb	r2, [r7, #3]
 80004c0:	4613      	mov	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4413      	add	r3, r2
 80004c6:	2207      	movs	r2, #7
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	43db      	mvns	r3, r3
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	4013      	ands	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80004d8:	7879      	ldrb	r1, [r7, #1]
 80004da:	78fa      	ldrb	r2, [r7, #3]
 80004dc:	4613      	mov	r3, r2
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	4413      	add	r3, r2
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80004f6:	78bb      	ldrb	r3, [r7, #2]
 80004f8:	2b06      	cmp	r3, #6
 80004fa:	d821      	bhi.n	8000540 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000500:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000502:	78bb      	ldrb	r3, [r7, #2]
 8000504:	1e5a      	subs	r2, r3, #1
 8000506:	4613      	mov	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4413      	add	r3, r2
 800050c:	221f      	movs	r2, #31
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	43db      	mvns	r3, r3
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	4013      	ands	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800051e:	78f9      	ldrb	r1, [r7, #3]
 8000520:	78bb      	ldrb	r3, [r7, #2]
 8000522:	1e5a      	subs	r2, r3, #1
 8000524:	4613      	mov	r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4313      	orrs	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800053e:	e047      	b.n	80005d0 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000540:	78bb      	ldrb	r3, [r7, #2]
 8000542:	2b0c      	cmp	r3, #12
 8000544:	d821      	bhi.n	800058a <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800054c:	78bb      	ldrb	r3, [r7, #2]
 800054e:	1fda      	subs	r2, r3, #7
 8000550:	4613      	mov	r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	221f      	movs	r2, #31
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	43db      	mvns	r3, r3
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	4013      	ands	r3, r2
 8000566:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000568:	78f9      	ldrb	r1, [r7, #3]
 800056a:	78bb      	ldrb	r3, [r7, #2]
 800056c:	1fda      	subs	r2, r3, #7
 800056e:	4613      	mov	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4313      	orrs	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000588:	e022      	b.n	80005d0 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000590:	78bb      	ldrb	r3, [r7, #2]
 8000592:	f1a3 020d 	sub.w	r2, r3, #13
 8000596:	4613      	mov	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	4413      	add	r3, r2
 800059c:	221f      	movs	r2, #31
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	43db      	mvns	r3, r3
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80005ae:	78f9      	ldrb	r1, [r7, #3]
 80005b0:	78bb      	ldrb	r3, [r7, #2]
 80005b2:	f1a3 020d 	sub.w	r2, r3, #13
 80005b6:	4613      	mov	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4313      	orrs	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 80005fa:	e005      	b.n	8000608 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	609a      	str	r2, [r3, #8]
  }
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d006      	beq.n	8000634 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000632:	e005      	b.n	8000640 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	609a      	str	r2, [r3, #8]
  }
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 800065c:	887b      	ldrh	r3, [r7, #2]
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	b29b      	uxth	r3, r3
 8000662:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	43da      	mvns	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	601a      	str	r2, [r3, #0]
}                    
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <DAC_SetChannel1Data+0x34>)
 800068a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	3308      	adds	r3, #8
 8000694:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	461a      	mov	r2, r3
 800069a:	887b      	ldrh	r3, [r7, #2]
 800069c:	6013      	str	r3, [r2, #0]
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40007400 	.word	0x40007400

080006b0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <DMA_Init+0xac>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80006da:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80006e6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	6a1b      	ldr	r3, [r3, #32]
 80006ec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80006f2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80006fe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000704:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	4313      	orrs	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f023 0307 	bic.w	r3, r3, #7
 800071e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4313      	orrs	r3, r2
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	4313      	orrs	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	691a      	ldr	r2, [r3, #16]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685a      	ldr	r2, [r3, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60da      	str	r2, [r3, #12]
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	f01c803f 	.word	0xf01c803f

08000760 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f043 0201 	orr.w	r2, r3, #1
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80007ee:	e005      	b.n	80007fc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f023 0201 	bic.w	r2, r3, #1
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	601a      	str	r2, [r3, #0]
  }
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	e001      	b.n	800082a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000838:	b480      	push	{r7}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <DMA_GetFlagStatus+0x6c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d802      	bhi.n	8000858 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <DMA_GetFlagStatus+0x70>)
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	e001      	b.n	800085c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <DMA_GetFlagStatus+0x74>)
 800085a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000862:	2b00      	cmp	r3, #0
 8000864:	d003      	beq.n	800086e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	e002      	b.n	8000874 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800087a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800087e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	4013      	ands	r3, r2
 8000886:	2b00      	cmp	r3, #0
 8000888:	d002      	beq.n	8000890 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800088a:	2301      	movs	r3, #1
 800088c:	75fb      	strb	r3, [r7, #23]
 800088e:	e001      	b.n	8000894 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000894:	7dfb      	ldrb	r3, [r7, #23]
}
 8000896:	4618      	mov	r0, r3
 8000898:	371c      	adds	r7, #28
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	4002640f 	.word	0x4002640f
 80008a8:	40026000 	.word	0x40026000
 80008ac:	40026400 	.word	0x40026400

080008b0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a10      	ldr	r2, [pc, #64]	; (8000900 <DMA_ClearFlag+0x50>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d802      	bhi.n	80008c8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <DMA_ClearFlag+0x54>)
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	e001      	b.n	80008cc <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <DMA_ClearFlag+0x58>)
 80008ca:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d007      	beq.n	80008e6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008dc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80008e4:	e006      	b.n	80008f4 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008ec:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	6093      	str	r3, [r2, #8]
  }    
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	4002640f 	.word	0x4002640f
 8000904:	40026000 	.word	0x40026000
 8000908:	40026400 	.word	0x40026400

0800090c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800090c:	b480      	push	{r7}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e076      	b.n	8000a16 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000928:	2201      	movs	r2, #1
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d165      	bne.n	8000a10 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2103      	movs	r1, #3
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	401a      	ands	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	791b      	ldrb	r3, [r3, #4]
 8000962:	4619      	mov	r1, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	431a      	orrs	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	791b      	ldrb	r3, [r3, #4]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d003      	beq.n	8000982 <GPIO_Init+0x76>
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	791b      	ldrb	r3, [r3, #4]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d12e      	bne.n	80009e0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2103      	movs	r1, #3
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	401a      	ands	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	795b      	ldrb	r3, [r3, #5]
 80009a0:	4619      	mov	r1, r3
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	401a      	ands	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	799b      	ldrb	r3, [r3, #6]
 80009ce:	4619      	mov	r1, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	fa01 f303 	lsl.w	r3, r1, r3
 80009d8:	b29b      	uxth	r3, r3
 80009da:	431a      	orrs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2103      	movs	r1, #3
 80009ec:	fa01 f303 	lsl.w	r3, r1, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	401a      	ands	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	79db      	ldrb	r3, [r3, #7]
 8000a00:	4619      	mov	r1, r3
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	3301      	adds	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d985      	bls.n	8000928 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	371c      	adds	r7, #28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	71da      	strb	r2, [r3, #7]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d006      	beq.n	8000a7c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a6e:	490a      	ldr	r1, [pc, #40]	; (8000a98 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a7a:	e006      	b.n	8000a8a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a7c:	4906      	ldr	r1, [pc, #24]	; (8000a98 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4013      	ands	r3, r2
 8000a88:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000aae:	490a      	ldr	r1, [pc, #40]	; (8000ad8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000aba:	e006      	b.n	8000aca <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000abc:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000aee:	490a      	ldr	r1, [pc, #40]	; (8000b18 <RCC_APB2PeriphClockCmd+0x3c>)
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <RCC_APB2PeriphClockCmd+0x3c>)
 8000af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000afa:	e006      	b.n	8000b0a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000afc:	4906      	ldr	r1, [pc, #24]	; (8000b18 <RCC_APB2PeriphClockCmd+0x3c>)
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4013      	ands	r3, r2
 8000b08:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d006      	beq.n	8000b3c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b2e:	490a      	ldr	r1, [pc, #40]	; (8000b58 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000b3a:	e006      	b.n	8000b4a <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000b3c:	4906      	ldr	r1, [pc, #24]	; (8000b58 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	4013      	ands	r3, r2
 8000b48:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	819a      	strh	r2, [r3, #12]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	891b      	ldrh	r3, [r3, #8]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	4013      	ands	r3, r2
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
 8000ba0:	e001      	b.n	8000ba6 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a29      	ldr	r2, [pc, #164]	; (8000c70 <TIM_TimeBaseInit+0xbc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d013      	beq.n	8000bf8 <TIM_TimeBaseInit+0x44>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <TIM_TimeBaseInit+0xc0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d00f      	beq.n	8000bf8 <TIM_TimeBaseInit+0x44>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bde:	d00b      	beq.n	8000bf8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <TIM_TimeBaseInit+0xc4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d007      	beq.n	8000bf8 <TIM_TimeBaseInit+0x44>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a24      	ldr	r2, [pc, #144]	; (8000c7c <TIM_TimeBaseInit+0xc8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d003      	beq.n	8000bf8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a23      	ldr	r2, [pc, #140]	; (8000c80 <TIM_TimeBaseInit+0xcc>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d108      	bne.n	8000c0a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 8000bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bfe:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	885a      	ldrh	r2, [r3, #2]
 8000c04:	89fb      	ldrh	r3, [r7, #14]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <TIM_TimeBaseInit+0xd0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d00c      	beq.n	8000c2c <TIM_TimeBaseInit+0x78>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <TIM_TimeBaseInit+0xd4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d008      	beq.n	8000c2c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c20:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	891a      	ldrh	r2, [r3, #8]
 8000c26:	89fb      	ldrh	r3, [r7, #14]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	89fa      	ldrh	r2, [r7, #14]
 8000c30:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	881a      	ldrh	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <TIM_TimeBaseInit+0xbc>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d003      	beq.n	8000c52 <TIM_TimeBaseInit+0x9e>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <TIM_TimeBaseInit+0xc0>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d104      	bne.n	8000c5c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	7a9b      	ldrb	r3, [r3, #10]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	829a      	strh	r2, [r3, #20]
}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40010000 	.word	0x40010000
 8000c74:	40010400 	.word	0x40010400
 8000c78:	40000400 	.word	0x40000400
 8000c7c:	40000800 	.word	0x40000800
 8000c80:	40000c00 	.word	0x40000c00
 8000c84:	40001000 	.word	0x40001000
 8000c88:	40001400 	.word	0x40001400

08000c8c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9a:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	729a      	strb	r2, [r3, #10]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d008      	beq.n	8000ce4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000ce2:	e007      	b.n	8000cf4 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	f023 0301 	bic.w	r3, r3, #1
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	801a      	strh	r2, [r3, #0]
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d10:	787b      	ldrb	r3, [r7, #1]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d008      	beq.n	8000d28 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	899b      	ldrh	r3, [r3, #12]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000d26:	e009      	b.n	8000d3c <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	899b      	ldrh	r3, [r3, #12]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	819a      	strh	r2, [r3, #12]
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	821a      	strh	r2, [r3, #16]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	889b      	ldrh	r3, [r3, #4]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	889b      	ldrh	r3, [r3, #4]
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	809a      	strh	r2, [r3, #4]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <STM_EVAL_LEDInit+0x50>)
 8000db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db6:	2101      	movs	r1, #1
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fe4f 	bl	8000a5c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <STM_EVAL_LEDInit+0x54>)
 8000dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <STM_EVAL_LEDInit+0x58>)
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	f107 0208 	add.w	r2, r7, #8
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fd90 	bl	800090c <GPIO_Init>
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	08001568 	.word	0x08001568
 8000df8:	08001560 	.word	0x08001560
 8000dfc:	20000000 	.word	0x20000000

08000e00 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <STM_EVAL_LEDOn+0x28>)
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	4905      	ldr	r1, [pc, #20]	; (8000e2c <STM_EVAL_LEDOn+0x2c>)
 8000e16:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000e1a:	831a      	strh	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	08001560 	.word	0x08001560

08000e30 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000e34:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <Audio_MAL_IRQHandler+0xe4>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <Audio_MAL_IRQHandler+0xe8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4610      	mov	r0, r2
 8000e40:	f7ff fcfa 	bl	8000838 <DMA_GetFlagStatus>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d062      	beq.n	8000f10 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000e4a:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <Audio_MAL_IRQHandler+0xec>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d04a      	beq.n	8000ee8 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000e52:	bf00      	nop
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <Audio_MAL_IRQHandler+0xe4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fcd5 	bl	8000808 <DMA_GetCmdStatus>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f7      	bne.n	8000e54 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <Audio_MAL_IRQHandler+0xe4>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <Audio_MAL_IRQHandler+0xe8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4610      	mov	r0, r2
 8000e70:	f7ff fd1e 	bl	80008b0 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <Audio_MAL_IRQHandler+0xf0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <Audio_MAL_IRQHandler+0xf4>)
 8000e7c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <Audio_MAL_IRQHandler+0xec>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e86:	4293      	cmp	r3, r2
 8000e88:	bf28      	it	cs
 8000e8a:	4613      	movcs	r3, r2
 8000e8c:	4a25      	ldr	r2, [pc, #148]	; (8000f24 <Audio_MAL_IRQHandler+0xf4>)
 8000e8e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <Audio_MAL_IRQHandler+0xe4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4923      	ldr	r1, [pc, #140]	; (8000f24 <Audio_MAL_IRQHandler+0xf4>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fc0a 	bl	80006b0 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <Audio_MAL_IRQHandler+0xe4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fc94 	bl	80007d0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <Audio_MAL_IRQHandler+0xf0>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <Audio_MAL_IRQHandler+0xec>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	bf28      	it	cs
 8000eb8:	460b      	movcs	r3, r1
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <Audio_MAL_IRQHandler+0xf0>)
 8000ec0:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <Audio_MAL_IRQHandler+0xec>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <Audio_MAL_IRQHandler+0xec>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	bf28      	it	cs
 8000ed2:	460b      	movcs	r3, r1
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <Audio_MAL_IRQHandler+0xec>)
 8000ed8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <Audio_MAL_IRQHandler+0xe4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fc75 	bl	80007d0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000ee6:	e013      	b.n	8000f10 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <Audio_MAL_IRQHandler+0xe4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fc6e 	bl	80007d0 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <Audio_MAL_IRQHandler+0xe4>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <Audio_MAL_IRQHandler+0xe8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4610      	mov	r0, r2
 8000f00:	f7ff fcd6 	bl	80008b0 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <Audio_MAL_IRQHandler+0xf0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f9b6 	bl	800127c <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000018 	.word	0x20000018
 8000f18:	2000001c 	.word	0x2000001c
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	2000003c 	.word	0x2000003c
 8000f24:	2000007c 	.word	0x2000007c

08000f28 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000f2c:	f7ff ff80 	bl	8000e30 <Audio_MAL_IRQHandler>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000f38:	f7ff ff7a 	bl	8000e30 <Audio_MAL_IRQHandler>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000f44:	2102      	movs	r1, #2
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <SPI3_IRQHandler+0x3c>)
 8000f48:	f7ff fe18 	bl	8000b7c <SPI_I2S_GetFlagStatus>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d011      	beq.n	8000f76 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <SPI3_IRQHandler+0x40>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d106      	bne.n	8000f68 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000f5a:	f000 f99b 	bl	8001294 <EVAL_AUDIO_GetSampleCallBack>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4619      	mov	r1, r3
 8000f62:	2004      	movs	r0, #4
 8000f64:	f7ff fb88 	bl	8000678 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000f68:	f000 f994 	bl	8001294 <EVAL_AUDIO_GetSampleCallBack>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <SPI3_IRQHandler+0x3c>)
 8000f72:	f7ff fdf3 	bl	8000b5c <SPI_I2S_SendData>
  }
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40003c00 	.word	0x40003c00
 8000f80:	20000014 	.word	0x20000014

08000f84 <init_adc>:
#include "stm32f4xx_adc.h"
#include "initial_ization.h"



void init_adc(volatile uint16_t ADCBuffer[NUM_CHANNELS]){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0a2      	sub	sp, #136	; 0x88
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]




	/* Enable timer (timer runs at 13.3 Hz)*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f7ff fd84 	bl	8000a9c <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&time_base_struct);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe77 	bl	8000c8c <TIM_TimeBaseStructInit>
	time_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	82bb      	strh	r3, [r7, #20]
	time_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81fb      	strh	r3, [r7, #14]
	time_base_struct.TIM_Period = myTIM2_PERIOD;
 8000fa6:	f243 1338 	movw	r3, #12600	; 0x3138
 8000faa:	613b      	str	r3, [r7, #16]
	time_base_struct.TIM_Prescaler = myTIM2_PRESCALER;
 8000fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb0:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &time_base_struct);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fbc:	f7ff fdfa 	bl	8000bb4 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fc6:	f7ff fed1 	bl	8000d6c <TIM_SelectOutputTrigger>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2101      	movs	r1, #1
 8000fce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fd2:	f7ff fe95 	bl	8000d00 <TIM_ITConfig>

	NVIC_Init_struct.NVIC_IRQChannel = TIM2_IRQn;
 8000fd6:	231c      	movs	r3, #28
 8000fd8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	NVIC_Init_struct.NVIC_IRQChannelCmd = ENABLE;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	NVIC_Init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	NVIC_Init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8000fe8:	230f      	movs	r3, #15
 8000fea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	NVIC_Init(&NVIC_Init_struct);
 8000fee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8e8 	bl	80001c8 <NVIC_Init>

	/* Enable clock on DMA1 & GPIO's */
	/* Enable DMA2, thats where ADC peripheral is used */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff fd2e 	bl	8000a5c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 8001000:	2101      	movs	r1, #1
 8001002:	2002      	movs	r0, #2
 8001004:	f7ff fd2a 	bl	8000a5c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 8001008:	2101      	movs	r1, #1
 800100a:	2004      	movs	r0, #4
 800100c:	f7ff fd26 	bl	8000a5c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 8001010:	2101      	movs	r1, #1
 8001012:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001016:	f7ff fd21 	bl	8000a5c <RCC_AHB1PeriphClockCmd>
	//GPIO_Pin_3	LFO-Frequency
	//GPIO_Pin_4	VCO-Volume
	//GPIO_Pin_5	ENVELOPE-Attack
	//GPIO_Pin_6	ENVELOPE-decay
	//GPIO_Pin_7	ENVELOPE-Sustain
	GPIO_StructInit(&GPIO_InitStructure);
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fd02 	bl	8000a28 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;
 8001024:	2313      	movs	r3, #19
 8001026:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8001028:	2303      	movs	r3, #3
 800102a:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800102c:	2302      	movs	r3, #2
 800102e:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001034:	f107 0318 	add.w	r3, r7, #24
 8001038:	4619      	mov	r1, r3
 800103a:	4865      	ldr	r0, [pc, #404]	; (80011d0 <init_adc+0x24c>)
 800103c:	f7ff fc66 	bl	800090c <GPIO_Init>

	//B bank pins
	//GPIO_Pin_0	ENVELOPE-Release
	//GPIO_Pin_1	FILTER-FreqLow
	GPIO_StructInit(&GPIO_InitStructure);
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fcef 	bl	8000a28 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 800104a:	2303      	movs	r3, #3
 800104c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 800104e:	2303      	movs	r3, #3
 8001050:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001052:	2302      	movs	r3, #2
 8001054:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4619      	mov	r1, r3
 8001060:	485c      	ldr	r0, [pc, #368]	; (80011d4 <init_adc+0x250>)
 8001062:	f7ff fc53 	bl	800090c <GPIO_Init>

	//C bank pins//GPIO_Pin_0	FILTER-FreqHigh
	//GPIO_Pin_1	FILTER-FreqResonance
	//GPIO_Pin_4	FILTER-FreqGain
	GPIO_StructInit(&GPIO_InitStructure);
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fcdc 	bl	8000a28 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 |GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8001070:	23ff      	movs	r3, #255	; 0xff
 8001072:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8001074:	2303      	movs	r3, #3
 8001076:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001078:	2302      	movs	r3, #2
 800107a:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	4619      	mov	r1, r3
 8001086:	4854      	ldr	r0, [pc, #336]	; (80011d8 <init_adc+0x254>)
 8001088:	f7ff fc40 	bl	800090c <GPIO_Init>




	/*  Initialise DMA */
	DMA_StructInit(&DMA_Init_struct);							// reset struct
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fb65 	bl	8000760 <DMA_StructInit>

	/* config of DMA */
	DMA_Init_struct.DMA_Channel = DMA_Channel_0; 				/* See Tab 43 */
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
	DMA_Init_struct.DMA_BufferSize = NUM_CHANNELS;				/*  13adc channels */
 800109a:	2305      	movs	r3, #5
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init_struct.DMA_DIR = DMA_DIR_PeripheralToMemory; 		/* ADC to mem */
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_Init_struct.DMA_FIFOMode = DMA_FIFOMode_Disable; 		/* no FIFO */
 80010a2:	2300      	movs	r3, #0
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_Init_struct.DMA_FIFOThreshold = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_Init_struct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80010aa:	2300      	movs	r3, #0
 80010ac:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init_struct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80010ae:	2300      	movs	r3, #0
 80010b0:	65bb      	str	r3, [r7, #88]	; 0x58
	DMA_Init_struct.DMA_Mode = DMA_Mode_Circular; 				/* circular buffer */
 80010b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init_struct.DMA_Priority = DMA_Priority_High; 			/* high priority */
 80010b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010bc:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init_struct.DMA_Memory0BaseAddr = (uint32_t)ADCBuffer; 	/* target addr */
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init_struct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; /* 16 bit */
 80010c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c6:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_Init_struct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 80010c8:	4b44      	ldr	r3, [pc, #272]	; (80011dc <init_adc+0x258>)
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init_struct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80010cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init_struct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80010d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_Init_struct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_Init(DMA2_Stream0, &DMA_Init_struct); 					/* See Table 43 for mapping */
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4619      	mov	r1, r3
 80010e2:	483f      	ldr	r0, [pc, #252]	; (80011e0 <init_adc+0x25c>)
 80010e4:	f7ff fae4 	bl	80006b0 <DMA_Init>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 80010e8:	2101      	movs	r1, #1
 80010ea:	483d      	ldr	r0, [pc, #244]	; (80011e0 <init_adc+0x25c>)
 80010ec:	f7ff fb70 	bl	80007d0 <DMA_Cmd>

	/*Initialize ADC*/
	ADC_StructInit(&adc_init_struct);						//populates structs with reset defaults
 80010f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f92d 	bl	8000354 <ADC_StructInit>
	ADC_CommonStructInit(&adc_com_init_struct);
 80010fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f970 	bl	80003e4 <ADC_CommonStructInit>
	ADC_Cmd(ADC1, DISABLE);
 8001104:	2100      	movs	r1, #0
 8001106:	4837      	ldr	r0, [pc, #220]	; (80011e4 <init_adc+0x260>)
 8001108:	f7ff f982 	bl	8000410 <ADC_Cmd>
	ADC_DeInit();
 800110c:	f7ff f8be 	bl	800028c <ADC_DeInit>

	/* init ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001110:	2101      	movs	r1, #1
 8001112:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001116:	f7ff fce1 	bl	8000adc <RCC_APB2PeriphClockCmd>

	/*Initialize Common ADC */
	adc_com_init_struct.ADC_Mode = ADC_Mode_Independent;
 800111a:	2300      	movs	r3, #0
 800111c:	663b      	str	r3, [r7, #96]	; 0x60
	adc_com_init_struct.ADC_Prescaler = ADC_Prescaler_Div2;
 800111e:	2300      	movs	r3, #0
 8001120:	667b      	str	r3, [r7, #100]	; 0x64
	adc_com_init_struct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001122:	2300      	movs	r3, #0
 8001124:	66bb      	str	r3, [r7, #104]	; 0x68
	adc_com_init_struct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
 8001126:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800112a:	66fb      	str	r3, [r7, #108]	; 0x6c
	ADC_CommonInit(&adc_com_init_struct);
 800112c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f92f 	bl	8000394 <ADC_CommonInit>

	/* Initialize ADC1 */
	adc_init_struct.ADC_Resolution = ADC_Resolution_12b;
 8001136:	2300      	movs	r3, #0
 8001138:	673b      	str	r3, [r7, #112]	; 0x70
	adc_init_struct.ADC_ScanConvMode = ENABLE;
 800113a:	2301      	movs	r3, #1
 800113c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	adc_init_struct.ADC_ContinuousConvMode = DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	adc_init_struct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 8001146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800114a:	67bb      	str	r3, [r7, #120]	; 0x78
	adc_init_struct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 800114c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001150:	67fb      	str	r3, [r7, #124]	; 0x7c
	adc_init_struct.ADC_DataAlign = ADC_DataAlign_Right;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	adc_init_struct.ADC_NbrOfConversion = NUM_CHANNELS; /* 5 channels in total */
 8001158:	2305      	movs	r3, #5
 800115a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	ADC_Init(ADC1, &adc_init_struct);
 800115e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001162:	4619      	mov	r1, r3
 8001164:	481f      	ldr	r0, [pc, #124]	; (80011e4 <init_adc+0x260>)
 8001166:	f7ff f89f 	bl	80002a8 <ADC_Init>

	/* Configure channels */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_480Cycles);		//VFO-Amplitude
 800116a:	2307      	movs	r3, #7
 800116c:	2201      	movs	r2, #1
 800116e:	2100      	movs	r1, #0
 8001170:	481c      	ldr	r0, [pc, #112]	; (80011e4 <init_adc+0x260>)
 8001172:	f7ff f969 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_480Cycles);		//VFO-Frequency
 8001176:	2307      	movs	r3, #7
 8001178:	2202      	movs	r2, #2
 800117a:	2101      	movs	r1, #1
 800117c:	4819      	ldr	r0, [pc, #100]	; (80011e4 <init_adc+0x260>)
 800117e:	f7ff f963 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_480Cycles);		//LFO-Amplitude
 8001182:	2307      	movs	r3, #7
 8001184:	2203      	movs	r2, #3
 8001186:	2102      	movs	r1, #2
 8001188:	4816      	ldr	r0, [pc, #88]	; (80011e4 <init_adc+0x260>)
 800118a:	f7ff f95d 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_480Cycles);		//LFO-Frequency
 800118e:	2307      	movs	r3, #7
 8001190:	2204      	movs	r2, #4
 8001192:	2103      	movs	r1, #3
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <init_adc+0x260>)
 8001196:	f7ff f957 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 5, ADC_SampleTime_480Cycles);		//VCO-Volume
 800119a:	2307      	movs	r3, #7
 800119c:	2205      	movs	r2, #5
 800119e:	2104      	movs	r1, #4
 80011a0:	4810      	ldr	r0, [pc, #64]	; (80011e4 <init_adc+0x260>)
 80011a2:	f7ff f951 	bl	8000448 <ADC_RegularChannelConfig>
//	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 12, ADC_SampleTime_480Cycles);	//FILTER-FreqResonance
//	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 13, ADC_SampleTime_480Cycles);	//FILTER-FreqGain


	/* Enable ADC1 DMA */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);			//enables DMA request after all adc conversions
 80011a6:	2101      	movs	r1, #1
 80011a8:	480e      	ldr	r0, [pc, #56]	; (80011e4 <init_adc+0x260>)
 80011aa:	f7ff fa33 	bl	8000614 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 80011ae:	2101      	movs	r1, #1
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <init_adc+0x260>)
 80011b2:	f7ff fa13 	bl	80005dc <ADC_DMACmd>

	/* Enable ADC1 **************************************************************/
	ADC_Cmd(ADC1, ENABLE);
 80011b6:	2101      	movs	r1, #1
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <init_adc+0x260>)
 80011ba:	f7ff f929 	bl	8000410 <ADC_Cmd>


	TIM_Cmd(TIM2, ENABLE);		//This could be dine in the main however gonna leave it here
 80011be:	2101      	movs	r1, #1
 80011c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011c4:	f7ff fd7c 	bl	8000cc0 <TIM_Cmd>


}
 80011c8:	bf00      	nop
 80011ca:	3788      	adds	r7, #136	; 0x88
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020000 	.word	0x40020000
 80011dc:	4001204c 	.word	0x4001204c
 80011e0:	40026410 	.word	0x40026410
 80011e4:	40012000 	.word	0x40012000

080011e8 <main>:

volatile uint16_t ADCBuffer[NUM_CHANNELS];


int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
  /*****************************This came with project just gona leave for now*******************************/
  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff fdd8 	bl	8000da4 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff fdd5 	bl	8000da4 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 80011fa:	2002      	movs	r0, #2
 80011fc:	f7ff fdd2 	bl	8000da4 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 8001200:	2003      	movs	r0, #3
 8001202:	f7ff fdcf 	bl	8000da4 <STM_EVAL_LEDInit>

  /* Turn on LEDs */
  STM_EVAL_LEDOn(LED3);
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff fdfa 	bl	8000e00 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED4);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fdf7 	bl	8000e00 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED5);
 8001212:	2002      	movs	r0, #2
 8001214:	f7ff fdf4 	bl	8000e00 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED6);
 8001218:	2003      	movs	r0, #3
 800121a:	f7ff fdf1 	bl	8000e00 <STM_EVAL_LEDOn>


  /**************************** Run Initialization functions and start timer************************************/


  init_adc(ADCBuffer);			//initialize ADC
 800121e:	4815      	ldr	r0, [pc, #84]	; (8001274 <main+0x8c>)
 8001220:	f7ff feb0 	bl	8000f84 <init_adc>
//  uint32_t adc_status_reg;
//
//  //TIM_Cmd(TIM2, ENABLE);		//start timer
//
//
 int i = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
 int j = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
//	  test = gain;
//
//	  adc_control_reg1 = ADC1->CR1;
//	  adc_control_reg2 = ADC1->CR2;
//	  adc_status_reg = ADC1->SR;
	  bufftest[0] = ADCBuffer[0];
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <main+0x8c>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	b29b      	uxth	r3, r3
 8001232:	80bb      	strh	r3, [r7, #4]
	  bufftest[1] = ADCBuffer[1];
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <main+0x8c>)
 8001236:	885b      	ldrh	r3, [r3, #2]
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
	  bufftest[2] = ADCBuffer[2];
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <main+0x8c>)
 800123e:	889b      	ldrh	r3, [r3, #4]
 8001240:	b29b      	uxth	r3, r3
 8001242:	813b      	strh	r3, [r7, #8]
	  bufftest[3] = ADCBuffer[3];
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <main+0x8c>)
 8001246:	88db      	ldrh	r3, [r3, #6]
 8001248:	b29b      	uxth	r3, r3
 800124a:	817b      	strh	r3, [r7, #10]
	  bufftest[4] = ADCBuffer[4];
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <main+0x8c>)
 800124e:	891b      	ldrh	r3, [r3, #8]
 8001250:	b29b      	uxth	r3, r3
 8001252:	81bb      	strh	r3, [r7, #12]
	  bufftest[5] = ADCBuffer[5];
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <main+0x8c>)
 8001256:	895b      	ldrh	r3, [r3, #10]
 8001258:	b29b      	uxth	r3, r3
 800125a:	81fb      	strh	r3, [r7, #14]
	// Waste some time
	for (j = 0; j < 5000000; j++){
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e002      	b.n	8001268 <main+0x80>
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	4a03      	ldr	r2, [pc, #12]	; (8001278 <main+0x90>)
 800126c:	4293      	cmp	r3, r2
 800126e:	ddf8      	ble.n	8001262 <main+0x7a>

	}
  }
 8001270:	e7dc      	b.n	800122c <main+0x44>
 8001272:	bf00      	nop
 8001274:	200000b8 	.word	0x200000b8
 8001278:	004c4b3f 	.word	0x004c4b3f

0800127c <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8001286:	bf00      	nop
}
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001298:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop

080012a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ae:	e003      	b.n	80012b8 <LoopCopyDataInit>

080012b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012b6:	3104      	adds	r1, #4

080012b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012c0:	d3f6      	bcc.n	80012b0 <CopyDataInit>
  ldr  r2, =_sbss
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012c4:	e002      	b.n	80012cc <LoopFillZerobss>

080012c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012c8:	f842 3b04 	str.w	r3, [r2], #4

080012cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012d0:	d3f9      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012d2:	f000 f861 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d6:	f000 f911 	bl	80014fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012da:	f7ff ff85 	bl	80011e8 <main>
  bx  lr    
 80012de:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012e0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80012e4:	08001580 	.word	0x08001580
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012ec:	20000020 	.word	0x20000020
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80012f0:	20000020 	.word	0x20000020
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012f4:	200000c4 	.word	0x200000c4

080012f8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <CAN1_RX0_IRQHandler>
	...

080012fc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001310:	e7fe      	b.n	8001310 <HardFault_Handler+0x4>
 8001312:	bf00      	nop

08001314 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>
 800131a:	bf00      	nop

0800131c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001320:	e7fe      	b.n	8001320 <BusFault_Handler+0x4>
 8001322:	bf00      	nop

08001324 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>
 800132a:	bf00      	nop

0800132c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop

0800134c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop

0800135c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <TIM2_IRQHandler>:


void TIM2_IRQHandler(){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8001370:	2101      	movs	r1, #1
 8001372:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001376:	f7ff fce7 	bl	8000d48 <TIM_ClearITPendingBit>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop

08001380 <ADC_IRQHandler>:

// set up yet but might to see if the adc is working
void ADC_IRQHandler() {
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
        /* acknowledge interrupt */
        ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8001384:	f240 2105 	movw	r1, #517	; 0x205
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <ADC_IRQHandler+0x14>)
 800138a:	f7ff f95f 	bl	800064c <ADC_ClearITPendingBit>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40012000 	.word	0x40012000

08001398 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <SystemInit+0x60>)
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <SystemInit+0x60>)
 80013a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <SystemInit+0x64>)
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <SystemInit+0x64>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <SystemInit+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <SystemInit+0x64>)
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <SystemInit+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <SystemInit+0x64>)
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <SystemInit+0x68>)
 80013d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013d4:	4a09      	ldr	r2, [pc, #36]	; (80013fc <SystemInit+0x64>)
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <SystemInit+0x64>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80013e6:	f000 f80d 	bl	8001404 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013ea:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <SystemInit+0x60>)
 80013ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f0:	609a      	str	r2, [r3, #8]
#endif
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	40023800 	.word	0x40023800
 8001400:	24003010 	.word	0x24003010

08001404 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001412:	4a36      	ldr	r2, [pc, #216]	; (80014ec <SetSysClock+0xe8>)
 8001414:	4b35      	ldr	r3, [pc, #212]	; (80014ec <SetSysClock+0xe8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <SetSysClock+0xe8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3301      	adds	r3, #1
 800142c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d103      	bne.n	800143c <SetSysClock+0x38>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800143a:	d1f0      	bne.n	800141e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <SetSysClock+0xe8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001448:	2301      	movs	r3, #1
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	e001      	b.n	8001452 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d142      	bne.n	80014de <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001458:	4a24      	ldr	r2, [pc, #144]	; (80014ec <SetSysClock+0xe8>)
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <SetSysClock+0xe8>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001464:	4a22      	ldr	r2, [pc, #136]	; (80014f0 <SetSysClock+0xec>)
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <SetSysClock+0xec>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800146e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001470:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <SetSysClock+0xe8>)
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <SetSysClock+0xe8>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001478:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <SetSysClock+0xe8>)
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <SetSysClock+0xe8>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001482:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <SetSysClock+0xe8>)
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <SetSysClock+0xe8>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800148e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <SetSysClock+0xe8>)
 8001492:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <SetSysClock+0xf0>)
 8001494:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <SetSysClock+0xe8>)
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <SetSysClock+0xe8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80014a2:	bf00      	nop
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <SetSysClock+0xe8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f9      	beq.n	80014a4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <SetSysClock+0xf4>)
 80014b2:	f240 6205 	movw	r2, #1541	; 0x605
 80014b6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80014b8:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <SetSysClock+0xe8>)
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <SetSysClock+0xe8>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f023 0303 	bic.w	r3, r3, #3
 80014c2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80014c4:	4a09      	ldr	r2, [pc, #36]	; (80014ec <SetSysClock+0xe8>)
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <SetSysClock+0xe8>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80014d0:	bf00      	nop
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <SetSysClock+0xe8>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d1f9      	bne.n	80014d2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000
 80014f4:	07405408 	.word	0x07405408
 80014f8:	40023c00 	.word	0x40023c00

080014fc <__libc_init_array>:
 80014fc:	b570      	push	{r4, r5, r6, lr}
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <__libc_init_array+0x3c>)
 8001500:	4c0e      	ldr	r4, [pc, #56]	; (800153c <__libc_init_array+0x40>)
 8001502:	1ae4      	subs	r4, r4, r3
 8001504:	10a4      	asrs	r4, r4, #2
 8001506:	2500      	movs	r5, #0
 8001508:	461e      	mov	r6, r3
 800150a:	42a5      	cmp	r5, r4
 800150c:	d004      	beq.n	8001518 <__libc_init_array+0x1c>
 800150e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001512:	4798      	blx	r3
 8001514:	3501      	adds	r5, #1
 8001516:	e7f8      	b.n	800150a <__libc_init_array+0xe>
 8001518:	f000 f816 	bl	8001548 <_init>
 800151c:	4c08      	ldr	r4, [pc, #32]	; (8001540 <__libc_init_array+0x44>)
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <__libc_init_array+0x48>)
 8001520:	1ae4      	subs	r4, r4, r3
 8001522:	10a4      	asrs	r4, r4, #2
 8001524:	2500      	movs	r5, #0
 8001526:	461e      	mov	r6, r3
 8001528:	42a5      	cmp	r5, r4
 800152a:	d004      	beq.n	8001536 <__libc_init_array+0x3a>
 800152c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001530:	4798      	blx	r3
 8001532:	3501      	adds	r5, #1
 8001534:	e7f8      	b.n	8001528 <__libc_init_array+0x2c>
 8001536:	bd70      	pop	{r4, r5, r6, pc}
 8001538:	08001578 	.word	0x08001578
 800153c:	08001578 	.word	0x08001578
 8001540:	0800157c 	.word	0x0800157c
 8001544:	08001578 	.word	0x08001578

08001548 <_init>:
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	bf00      	nop
 800154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154e:	bc08      	pop	{r3}
 8001550:	469e      	mov	lr, r3
 8001552:	4770      	bx	lr

08001554 <_fini>:
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001556:	bf00      	nop
 8001558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155a:	bc08      	pop	{r3}
 800155c:	469e      	mov	lr, r3
 800155e:	4770      	bx	lr
