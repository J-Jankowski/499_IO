
C:\Users\jjank\Desktop\ELEC 499\499_IO_F4\Debug\499_IO_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000210c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002294  08002294  00012294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080022c4  080022c4  000122c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080022c8  080022c8  000122c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  080022cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          000000c4  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000e4  200000e4  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a37e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001bc3  00000000  00000000  0002a3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d18  00000000  00000000  0002bf98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bf0  00000000  00000000  0002ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000045d6  00000000  00000000  0002d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003e1f  00000000  00000000  00031e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00035c95  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000036f4  00000000  00000000  00035d14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800227c 	.word	0x0800227c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	0800227c 	.word	0x0800227c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001e0:	2300      	movs	r3, #0
 80001e2:	73fb      	strb	r3, [r7, #15]
 80001e4:	2300      	movs	r3, #0
 80001e6:	73bb      	strb	r3, [r7, #14]
 80001e8:	230f      	movs	r3, #15
 80001ea:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d038      	beq.n	8000266 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001f4:	4b27      	ldr	r3, [pc, #156]	; (8000294 <NVIC_Init+0xbc>)
 80001f6:	68db      	ldr	r3, [r3, #12]
 80001f8:	43db      	mvns	r3, r3
 80001fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001fe:	0a1b      	lsrs	r3, r3, #8
 8000200:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	f1c3 0304 	rsb	r3, r3, #4
 8000208:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800020a:	7b7a      	ldrb	r2, [r7, #13]
 800020c:	7bfb      	ldrb	r3, [r7, #15]
 800020e:	fa42 f303 	asr.w	r3, r2, r3
 8000212:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	785b      	ldrb	r3, [r3, #1]
 8000218:	461a      	mov	r2, r3
 800021a:	7bbb      	ldrb	r3, [r7, #14]
 800021c:	fa02 f303 	lsl.w	r3, r2, r3
 8000220:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	789a      	ldrb	r2, [r3, #2]
 8000226:	7b7b      	ldrb	r3, [r7, #13]
 8000228:	4013      	ands	r3, r2
 800022a:	b2da      	uxtb	r2, r3
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	4313      	orrs	r3, r2
 8000230:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000232:	7bfb      	ldrb	r3, [r7, #15]
 8000234:	011b      	lsls	r3, r3, #4
 8000236:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000238:	4a17      	ldr	r2, [pc, #92]	; (8000298 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	4413      	add	r3, r2
 8000240:	7bfa      	ldrb	r2, [r7, #15]
 8000242:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000246:	4a14      	ldr	r2, [pc, #80]	; (8000298 <NVIC_Init+0xc0>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	095b      	lsrs	r3, r3, #5
 800024e:	b2db      	uxtb	r3, r3
 8000250:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	f003 031f 	and.w	r3, r3, #31
 800025a:	2101      	movs	r1, #1
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000260:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000264:	e00f      	b.n	8000286 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000266:	490c      	ldr	r1, [pc, #48]	; (8000298 <NVIC_Init+0xc0>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	095b      	lsrs	r3, r3, #5
 800026e:	b2db      	uxtb	r3, r3
 8000270:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	f003 031f 	and.w	r3, r3, #31
 800027a:	2201      	movs	r2, #1
 800027c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027e:	f100 0320 	add.w	r3, r0, #32
 8000282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000286:	bf00      	nop
 8000288:	3714      	adds	r7, #20
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000e100 	.word	0xe000e100

0800029c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80002a0:	2101      	movs	r1, #1
 80002a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002a6:	f000 fcfd 	bl	8000ca4 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80002aa:	2100      	movs	r1, #0
 80002ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002b0:	f000 fcf8 	bl	8000ca4 <RCC_APB2PeriphResetCmd>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002da:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	791b      	ldrb	r3, [r3, #4]
 80002e0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002e6:	4313      	orrs	r3, r2
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	4313      	orrs	r3, r2
 80002ec:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <ADC_Init+0xa8>)
 80002fe:	4013      	ands	r3, r2
 8000300:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800030a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000310:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000318:	4313      	orrs	r3, r2
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4313      	orrs	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800032a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000332:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	7d1b      	ldrb	r3, [r3, #20]
 8000338:	3b01      	subs	r3, #1
 800033a:	b2da      	uxtb	r2, r3
 800033c:	7afb      	ldrb	r3, [r7, #11]
 800033e:	4313      	orrs	r3, r2
 8000340:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000342:	7afb      	ldrb	r3, [r7, #11]
 8000344:	051b      	lsls	r3, r3, #20
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	4313      	orrs	r3, r2
 800034a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	c0fff7fd 	.word	0xc0fff7fd

08000364 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2200      	movs	r2, #0
 8000376:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2200      	movs	r2, #0
 800037c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2201      	movs	r2, #1
 8000394:	751a      	strb	r2, [r3, #20]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop

080003a4 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80003b0:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <ADC_CommonInit+0x48>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <ADC_CommonInit+0x4c>)
 80003ba:	4013      	ands	r3, r2
 80003bc:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003c6:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003cc:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003d2:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80003da:	4a04      	ldr	r2, [pc, #16]	; (80003ec <ADC_CommonInit+0x48>)
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	6053      	str	r3, [r2, #4]
}
 80003e0:	bf00      	nop
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	40012300 	.word	0x40012300
 80003f0:	fffc30e0 	.word	0xfffc30e0

080003f4 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d006      	beq.n	8000440 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	f043 0201 	orr.w	r2, r3, #1
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800043e:	e005      	b.n	800044c <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	f023 0201 	bic.w	r2, r3, #1
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	609a      	str	r2, [r3, #8]
  }
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	4608      	mov	r0, r1
 8000462:	4611      	mov	r1, r2
 8000464:	461a      	mov	r2, r3
 8000466:	4603      	mov	r3, r0
 8000468:	70fb      	strb	r3, [r7, #3]
 800046a:	460b      	mov	r3, r1
 800046c:	70bb      	strb	r3, [r7, #2]
 800046e:	4613      	mov	r3, r2
 8000470:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800047a:	78fb      	ldrb	r3, [r7, #3]
 800047c:	2b09      	cmp	r3, #9
 800047e:	d923      	bls.n	80004c8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000486:	78fb      	ldrb	r3, [r7, #3]
 8000488:	f1a3 020a 	sub.w	r2, r3, #10
 800048c:	4613      	mov	r3, r2
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	4413      	add	r3, r2
 8000492:	2207      	movs	r2, #7
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	43db      	mvns	r3, r3
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	4013      	ands	r3, r2
 80004a2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80004a4:	7879      	ldrb	r1, [r7, #1]
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	f1a3 020a 	sub.w	r2, r3, #10
 80004ac:	4613      	mov	r3, r2
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4413      	add	r3, r2
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	4313      	orrs	r3, r2
 80004be:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	e01e      	b.n	8000506 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80004ce:	78fa      	ldrb	r2, [r7, #3]
 80004d0:	4613      	mov	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	4413      	add	r3, r2
 80004d6:	2207      	movs	r2, #7
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	43db      	mvns	r3, r3
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	4013      	ands	r3, r2
 80004e6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80004e8:	7879      	ldrb	r1, [r7, #1]
 80004ea:	78fa      	ldrb	r2, [r7, #3]
 80004ec:	4613      	mov	r3, r2
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	4413      	add	r3, r2
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000506:	78bb      	ldrb	r3, [r7, #2]
 8000508:	2b06      	cmp	r3, #6
 800050a:	d821      	bhi.n	8000550 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000510:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000512:	78bb      	ldrb	r3, [r7, #2]
 8000514:	1e5a      	subs	r2, r3, #1
 8000516:	4613      	mov	r3, r2
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	4413      	add	r3, r2
 800051c:	221f      	movs	r2, #31
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	43db      	mvns	r3, r3
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	4013      	ands	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800052e:	78f9      	ldrb	r1, [r7, #3]
 8000530:	78bb      	ldrb	r3, [r7, #2]
 8000532:	1e5a      	subs	r2, r3, #1
 8000534:	4613      	mov	r3, r2
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	4413      	add	r3, r2
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	4313      	orrs	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800054e:	e047      	b.n	80005e0 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000550:	78bb      	ldrb	r3, [r7, #2]
 8000552:	2b0c      	cmp	r3, #12
 8000554:	d821      	bhi.n	800059a <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800055c:	78bb      	ldrb	r3, [r7, #2]
 800055e:	1fda      	subs	r2, r3, #7
 8000560:	4613      	mov	r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	221f      	movs	r2, #31
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	43db      	mvns	r3, r3
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	4013      	ands	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000578:	78f9      	ldrb	r1, [r7, #3]
 800057a:	78bb      	ldrb	r3, [r7, #2]
 800057c:	1fda      	subs	r2, r3, #7
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	fa01 f303 	lsl.w	r3, r1, r3
 8000588:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	4313      	orrs	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000598:	e022      	b.n	80005e0 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80005a0:	78bb      	ldrb	r3, [r7, #2]
 80005a2:	f1a3 020d 	sub.w	r2, r3, #13
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	221f      	movs	r2, #31
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	43db      	mvns	r3, r3
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80005be:	78f9      	ldrb	r1, [r7, #3]
 80005c0:	78bb      	ldrb	r3, [r7, #2]
 80005c2:	f1a3 020d 	sub.w	r2, r3, #13
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	fa01 f303 	lsl.w	r3, r1, r3
 80005d0:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005f8:	78fb      	ldrb	r3, [r7, #3]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d006      	beq.n	800060c <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 800060a:	e005      	b.n	8000618 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]
  }
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000630:	78fb      	ldrb	r3, [r7, #3]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000642:	e005      	b.n	8000650 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	609a      	str	r2, [r3, #8]
  }
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 800066c:	887b      	ldrh	r3, [r7, #2]
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	b29b      	uxth	r3, r3
 8000672:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	43da      	mvns	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	601a      	str	r2, [r3, #0]
}                    
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <DAC_SetChannel1Data+0x34>)
 800069a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	3308      	adds	r3, #8
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	461a      	mov	r2, r3
 80006aa:	887b      	ldrh	r3, [r7, #2]
 80006ac:	6013      	str	r3, [r2, #0]
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40007400 	.word	0x40007400

080006c0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <DMA_Init+0xac>)
 80006d8:	4013      	ands	r3, r2
 80006da:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80006ea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80006f6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	6a1b      	ldr	r3, [r3, #32]
 80006fc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000702:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000708:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800070e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000714:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4313      	orrs	r3, r2
 800071a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f023 0307 	bic.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	4313      	orrs	r3, r2
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	691a      	ldr	r2, [r3, #16]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60da      	str	r2, [r3, #12]
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	f01c803f 	.word	0xf01c803f

08000770 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d006      	beq.n	8000800 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f043 0201 	orr.w	r2, r3, #1
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80007fe:	e005      	b.n	800080c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f023 0201 	bic.w	r2, r3, #1
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	601a      	str	r2, [r3, #0]
  }
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e001      	b.n	800083a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000848:	b480      	push	{r7}
 800084a:	b087      	sub	sp, #28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <DMA_GetFlagStatus+0x6c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d802      	bhi.n	8000868 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <DMA_GetFlagStatus+0x70>)
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	e001      	b.n	800086c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <DMA_GetFlagStatus+0x74>)
 800086a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d003      	beq.n	800087e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e002      	b.n	8000884 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800088a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800088e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	4013      	ands	r3, r2
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800089a:	2301      	movs	r3, #1
 800089c:	75fb      	strb	r3, [r7, #23]
 800089e:	e001      	b.n	80008a4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	4002640f 	.word	0x4002640f
 80008b8:	40026000 	.word	0x40026000
 80008bc:	40026400 	.word	0x40026400

080008c0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a10      	ldr	r2, [pc, #64]	; (8000910 <DMA_ClearFlag+0x50>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d802      	bhi.n	80008d8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <DMA_ClearFlag+0x54>)
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e001      	b.n	80008dc <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <DMA_ClearFlag+0x58>)
 80008da:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d007      	beq.n	80008f6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008ec:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80008f4:	e006      	b.n	8000904 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008fc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6093      	str	r3, [r2, #8]
  }    
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	4002640f 	.word	0x4002640f
 8000914:	40026000 	.word	0x40026000
 8000918:	40026400 	.word	0x40026400

0800091c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000928:	4b34      	ldr	r3, [pc, #208]	; (80009fc <EXTI_Init+0xe0>)
 800092a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	799b      	ldrb	r3, [r3, #6]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d04f      	beq.n	80009d4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000934:	4931      	ldr	r1, [pc, #196]	; (80009fc <EXTI_Init+0xe0>)
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <EXTI_Init+0xe0>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	43db      	mvns	r3, r3
 8000940:	4013      	ands	r3, r2
 8000942:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000944:	492d      	ldr	r1, [pc, #180]	; (80009fc <EXTI_Init+0xe0>)
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <EXTI_Init+0xe0>)
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	43db      	mvns	r3, r3
 8000950:	4013      	ands	r3, r2
 8000952:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	791b      	ldrb	r3, [r3, #4]
 8000958:	461a      	mov	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	6811      	ldr	r1, [r2, #0]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	430a      	orrs	r2, r1
 800096c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800096e:	4923      	ldr	r1, [pc, #140]	; (80009fc <EXTI_Init+0xe0>)
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <EXTI_Init+0xe0>)
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	43db      	mvns	r3, r3
 800097a:	4013      	ands	r3, r2
 800097c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800097e:	491f      	ldr	r1, [pc, #124]	; (80009fc <EXTI_Init+0xe0>)
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <EXTI_Init+0xe0>)
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	43db      	mvns	r3, r3
 800098a:	4013      	ands	r3, r2
 800098c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	795b      	ldrb	r3, [r3, #5]
 8000992:	2b10      	cmp	r3, #16
 8000994:	d10e      	bne.n	80009b4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000996:	4919      	ldr	r1, [pc, #100]	; (80009fc <EXTI_Init+0xe0>)
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <EXTI_Init+0xe0>)
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80009a4:	4915      	ldr	r1, [pc, #84]	; (80009fc <EXTI_Init+0xe0>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <EXTI_Init+0xe0>)
 80009a8:	68da      	ldr	r2, [r3, #12]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80009b2:	e01d      	b.n	80009f0 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <EXTI_Init+0xe0>)
 80009b6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	461a      	mov	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4413      	add	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	6811      	ldr	r1, [r2, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	6812      	ldr	r2, [r2, #0]
 80009ce:	430a      	orrs	r2, r1
 80009d0:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80009d2:	e00d      	b.n	80009f0 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	791b      	ldrb	r3, [r3, #4]
 80009d8:	461a      	mov	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	6811      	ldr	r1, [r2, #0]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	43d2      	mvns	r2, r2
 80009ec:	400a      	ands	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]
  }
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	40013c00 	.word	0x40013c00

08000a00 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <EXTI_ClearITPendingBit+0x1c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6153      	str	r3, [r2, #20]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40013c00 	.word	0x40013c00

08000a20 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e076      	b.n	8000b2a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d165      	bne.n	8000b24 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	2103      	movs	r1, #3
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	401a      	ands	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	791b      	ldrb	r3, [r3, #4]
 8000a76:	4619      	mov	r1, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	431a      	orrs	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	791b      	ldrb	r3, [r3, #4]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d003      	beq.n	8000a96 <GPIO_Init+0x76>
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	791b      	ldrb	r3, [r3, #4]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d12e      	bne.n	8000af4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	795b      	ldrb	r3, [r3, #5]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	799b      	ldrb	r3, [r3, #6]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	431a      	orrs	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2103      	movs	r1, #3
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	401a      	ands	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	79db      	ldrb	r3, [r3, #7]
 8000b14:	4619      	mov	r1, r3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d985      	bls.n	8000a3c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000b30:	bf00      	nop
 8000b32:	371c      	adds	r7, #28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	71da      	strb	r2, [r3, #7]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	691a      	ldr	r2, [r3, #16]
 8000b84:	887b      	ldrh	r3, [r7, #2]
 8000b86:	4013      	ands	r3, r2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e001      	b.n	8000b96 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	831a      	strh	r2, [r3, #24]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	835a      	strh	r2, [r3, #26]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d006      	beq.n	8000c04 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000bf6:	490a      	ldr	r1, [pc, #40]	; (8000c20 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000c02:	e006      	b.n	8000c12 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000c04:	4906      	ldr	r1, [pc, #24]	; (8000c20 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c36:	490a      	ldr	r1, [pc, #40]	; (8000c60 <RCC_APB1PeriphClockCmd+0x3c>)
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <RCC_APB1PeriphClockCmd+0x3c>)
 8000c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000c42:	e006      	b.n	8000c52 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c44:	4906      	ldr	r1, [pc, #24]	; (8000c60 <RCC_APB1PeriphClockCmd+0x3c>)
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <RCC_APB1PeriphClockCmd+0x3c>)
 8000c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4013      	ands	r3, r2
 8000c50:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d006      	beq.n	8000c84 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c76:	490a      	ldr	r1, [pc, #40]	; (8000ca0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000c82:	e006      	b.n	8000c92 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c84:	4906      	ldr	r1, [pc, #24]	; (8000ca0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	4013      	ands	r3, r2
 8000c90:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d006      	beq.n	8000cc4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000cb6:	490a      	ldr	r1, [pc, #40]	; (8000ce0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000cc2:	e006      	b.n	8000cd2 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000cc4:	4906      	ldr	r1, [pc, #24]	; (8000ce0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4013      	ands	r3, r2
 8000cd0:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	887a      	ldrh	r2, [r7, #2]
 8000cf4:	819a      	strh	r2, [r3, #12]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	891b      	ldrh	r3, [r3, #8]
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e001      	b.n	8000d2e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000d3c:	b490      	push	{r4, r7}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	460a      	mov	r2, r1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000d60:	4916      	ldr	r1, [pc, #88]	; (8000dbc <SYSCFG_EXTILineConfig+0x80>)
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <SYSCFG_EXTILineConfig+0x80>)
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	3302      	adds	r3, #2
 8000d74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	1c83      	adds	r3, r0, #2
 8000d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <SYSCFG_EXTILineConfig+0x80>)
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	089b      	lsrs	r3, r3, #2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461c      	mov	r4, r3
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <SYSCFG_EXTILineConfig+0x80>)
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	3302      	adds	r3, #2
 8000d98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d9c:	79f9      	ldrb	r1, [r7, #7]
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	431a      	orrs	r2, r3
 8000dac:	1ca3      	adds	r3, r4, #2
 8000dae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc90      	pop	{r4, r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40013800 	.word	0x40013800

08000dc0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a29      	ldr	r2, [pc, #164]	; (8000e7c <TIM_TimeBaseInit+0xbc>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d013      	beq.n	8000e04 <TIM_TimeBaseInit+0x44>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <TIM_TimeBaseInit+0xc0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d00f      	beq.n	8000e04 <TIM_TimeBaseInit+0x44>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dea:	d00b      	beq.n	8000e04 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <TIM_TimeBaseInit+0xc4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <TIM_TimeBaseInit+0x44>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a24      	ldr	r2, [pc, #144]	; (8000e88 <TIM_TimeBaseInit+0xc8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <TIM_TimeBaseInit+0xcc>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d108      	bne.n	8000e16 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e0a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	885a      	ldrh	r2, [r3, #2]
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <TIM_TimeBaseInit+0xd0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00c      	beq.n	8000e38 <TIM_TimeBaseInit+0x78>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <TIM_TimeBaseInit+0xd4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d008      	beq.n	8000e38 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000e26:	89fb      	ldrh	r3, [r7, #14]
 8000e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e2c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	891a      	ldrh	r2, [r3, #8]
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	89fa      	ldrh	r2, [r7, #14]
 8000e3c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	881a      	ldrh	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <TIM_TimeBaseInit+0xbc>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d003      	beq.n	8000e5e <TIM_TimeBaseInit+0x9e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <TIM_TimeBaseInit+0xc0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d104      	bne.n	8000e68 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	7a9b      	ldrb	r3, [r3, #10]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	829a      	strh	r2, [r3, #20]
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	40010400 	.word	0x40010400
 8000e84:	40000400 	.word	0x40000400
 8000e88:	40000800 	.word	0x40000800
 8000e8c:	40000c00 	.word	0x40000c00
 8000e90:	40001000 	.word	0x40001000
 8000e94:	40001400 	.word	0x40001400

08000e98 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea6:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	729a      	strb	r2, [r3, #10]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d008      	beq.n	8000ef0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000eee:	e007      	b.n	8000f00 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	f023 0301 	bic.w	r3, r3, #1
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	801a      	strh	r2, [r3, #0]
  }
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d008      	beq.n	8000f34 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	899b      	ldrh	r3, [r3, #12]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	887b      	ldrh	r3, [r7, #2]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000f32:	e009      	b.n	8000f48 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	899b      	ldrh	r3, [r3, #12]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4013      	ands	r3, r2
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	819a      	strh	r2, [r3, #12]
  }
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	821a      	strh	r2, [r3, #16]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	889b      	ldrh	r3, [r3, #4]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	889b      	ldrh	r3, [r3, #4]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	809a      	strh	r2, [r3, #4]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <STM_EVAL_LEDInit+0x50>)
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe0d 	bl	8000be4 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <STM_EVAL_LEDInit+0x54>)
 8000fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <STM_EVAL_LEDInit+0x58>)
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	f107 0208 	add.w	r2, r7, #8
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fd14 	bl	8000a20 <GPIO_Init>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	080022b4 	.word	0x080022b4
 8001004:	080022ac 	.word	0x080022ac
 8001008:	20000000 	.word	0x20000000

0800100c <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <STM_EVAL_LEDOn+0x28>)
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	79fa      	ldrb	r2, [r7, #7]
 8001020:	4905      	ldr	r1, [pc, #20]	; (8001038 <STM_EVAL_LEDOn+0x2c>)
 8001022:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001026:	831a      	strh	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	20000000 	.word	0x20000000
 8001038:	080022ac 	.word	0x080022ac

0800103c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <Audio_MAL_IRQHandler+0xe4>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b37      	ldr	r3, [pc, #220]	; (8001124 <Audio_MAL_IRQHandler+0xe8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	4610      	mov	r0, r2
 800104c:	f7ff fbfc 	bl	8000848 <DMA_GetFlagStatus>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d062      	beq.n	800111c <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <Audio_MAL_IRQHandler+0xec>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d04a      	beq.n	80010f4 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800105e:	bf00      	nop
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <Audio_MAL_IRQHandler+0xe4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fbd7 	bl	8000818 <DMA_GetCmdStatus>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f7      	bne.n	8001060 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <Audio_MAL_IRQHandler+0xe4>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <Audio_MAL_IRQHandler+0xe8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	4610      	mov	r0, r2
 800107c:	f7ff fc20 	bl	80008c0 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <Audio_MAL_IRQHandler+0xf0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <Audio_MAL_IRQHandler+0xf4>)
 8001088:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <Audio_MAL_IRQHandler+0xec>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001092:	4293      	cmp	r3, r2
 8001094:	bf28      	it	cs
 8001096:	4613      	movcs	r3, r2
 8001098:	4a25      	ldr	r2, [pc, #148]	; (8001130 <Audio_MAL_IRQHandler+0xf4>)
 800109a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <Audio_MAL_IRQHandler+0xe4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4923      	ldr	r1, [pc, #140]	; (8001130 <Audio_MAL_IRQHandler+0xf4>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fb0c 	bl	80006c0 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <Audio_MAL_IRQHandler+0xe4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fb96 	bl	80007e0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <Audio_MAL_IRQHandler+0xf0>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <Audio_MAL_IRQHandler+0xec>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010c0:	428b      	cmp	r3, r1
 80010c2:	bf28      	it	cs
 80010c4:	460b      	movcs	r3, r1
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	4a18      	ldr	r2, [pc, #96]	; (800112c <Audio_MAL_IRQHandler+0xf0>)
 80010cc:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <Audio_MAL_IRQHandler+0xec>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <Audio_MAL_IRQHandler+0xec>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010da:	428b      	cmp	r3, r1
 80010dc:	bf28      	it	cs
 80010de:	460b      	movcs	r3, r1
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <Audio_MAL_IRQHandler+0xec>)
 80010e4:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <Audio_MAL_IRQHandler+0xe4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2101      	movs	r1, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fb77 	bl	80007e0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80010f2:	e013      	b.n	800111c <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <Audio_MAL_IRQHandler+0xe4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fb70 	bl	80007e0 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <Audio_MAL_IRQHandler+0xe4>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <Audio_MAL_IRQHandler+0xe8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f7ff fbd8 	bl	80008c0 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <Audio_MAL_IRQHandler+0xf0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fe1a 	bl	8001d50 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000018 	.word	0x20000018
 8001124:	2000001c 	.word	0x2000001c
 8001128:	20000010 	.word	0x20000010
 800112c:	2000003c 	.word	0x2000003c
 8001130:	2000007c 	.word	0x2000007c

08001134 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001138:	f7ff ff80 	bl	800103c <Audio_MAL_IRQHandler>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001144:	f7ff ff7a 	bl	800103c <Audio_MAL_IRQHandler>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001150:	2102      	movs	r1, #2
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <SPI3_IRQHandler+0x3c>)
 8001154:	f7ff fdd6 	bl	8000d04 <SPI_I2S_GetFlagStatus>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d011      	beq.n	8001182 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <SPI3_IRQHandler+0x40>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d106      	bne.n	8001174 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001166:	f000 fdff 	bl	8001d68 <EVAL_AUDIO_GetSampleCallBack>
 800116a:	4603      	mov	r3, r0
 800116c:	4619      	mov	r1, r3
 800116e:	2004      	movs	r0, #4
 8001170:	f7ff fa8a 	bl	8000688 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001174:	f000 fdf8 	bl	8001d68 <EVAL_AUDIO_GetSampleCallBack>
 8001178:	4603      	mov	r3, r0
 800117a:	4619      	mov	r1, r3
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <SPI3_IRQHandler+0x3c>)
 800117e:	f7ff fdb1 	bl	8000ce4 <SPI_I2S_SendData>
  }
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40003c00 	.word	0x40003c00
 800118c:	20000014 	.word	0x20000014

08001190 <init_adc>:
/*
 * Initializes the ADC to work in scan mode with 13 channels for pots
 * Uses DMA to transfer data and a timer to throttle the ADC conversion
 * The conversion cycle occurs every 75ms this function starts the timer.
 */
void init_adc(volatile uint16_t ADCBuffer[NUM_CHANNELS]){
 8001190:	b580      	push	{r7, lr}
 8001192:	b0a0      	sub	sp, #128	; 0x80
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]




	/* Enable timer (timer runs at 13.3 Hz)*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001198:	2101      	movs	r1, #1
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff fd42 	bl	8000c24 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&time_base_struct);
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fe77 	bl	8000e98 <TIM_TimeBaseStructInit>
	time_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	823b      	strh	r3, [r7, #16]
	time_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80011ae:	2300      	movs	r3, #0
 80011b0:	817b      	strh	r3, [r7, #10]
	time_base_struct.TIM_Period = myTIM2_PERIOD;
 80011b2:	f243 1338 	movw	r3, #12600	; 0x3138
 80011b6:	60fb      	str	r3, [r7, #12]
	time_base_struct.TIM_Prescaler = myTIM2_PRESCALER;
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &time_base_struct);
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011c8:	f7ff fdfa 	bl	8000dc0 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 80011cc:	2120      	movs	r1, #32
 80011ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011d2:	f7ff fed1 	bl	8000f78 <TIM_SelectOutputTrigger>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2101      	movs	r1, #1
 80011da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011de:	f7ff fe95 	bl	8000f0c <TIM_ITConfig>

	/* Enable clock on DMA1 & GPIO's */
	/* Enable DMA2, thats where ADC peripheral is used */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 80011e2:	2101      	movs	r1, #1
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff fcfd 	bl	8000be4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 80011ea:	2101      	movs	r1, #1
 80011ec:	2002      	movs	r0, #2
 80011ee:	f7ff fcf9 	bl	8000be4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 80011f2:	2101      	movs	r1, #1
 80011f4:	2004      	movs	r0, #4
 80011f6:	f7ff fcf5 	bl	8000be4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 80011fa:	2101      	movs	r1, #1
 80011fc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001200:	f7ff fcf0 	bl	8000be4 <RCC_AHB1PeriphClockCmd>
	//GPIO_Pin_3	LFO-Frequency
	//GPIO_Pin_4	VCO-Volume
	//GPIO_Pin_5	ENVELOPE-Attack
	//GPIO_Pin_6	ENVELOPE-decay
	//GPIO_Pin_7	ENVELOPE-Sustain
	GPIO_StructInit(&GPIO_InitStructure);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fc97 	bl	8000b3c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 |GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 800120e:	23ff      	movs	r3, #255	; 0xff
 8001210:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8001212:	2303      	movs	r3, #3
 8001214:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001216:	2302      	movs	r3, #2
 8001218:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	487c      	ldr	r0, [pc, #496]	; (8001418 <init_adc+0x288>)
 8001226:	f7ff fbfb 	bl	8000a20 <GPIO_Init>

	//B bank pins
	//GPIO_Pin_0	ENVELOPE-Release
	//GPIO_Pin_1	FILTER-FreqLow
	GPIO_StructInit(&GPIO_InitStructure);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fc84 	bl	8000b3c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 8001234:	2303      	movs	r3, #3
 8001236:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8001238:	2303      	movs	r3, #3
 800123a:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800123c:	2302      	movs	r3, #2
 800123e:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4874      	ldr	r0, [pc, #464]	; (800141c <init_adc+0x28c>)
 800124c:	f7ff fbe8 	bl	8000a20 <GPIO_Init>

	//C bank pins//GPIO_Pin_0	FILTER-FreqHigh
	//GPIO_Pin_1	FILTER-FreqResonance
	//GPIO_Pin_4	FILTER-FreqGain
	GPIO_StructInit(&GPIO_InitStructure);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fc71 	bl	8000b3c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;
 800125a:	2313      	movs	r3, #19
 800125c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 800125e:	2303      	movs	r3, #3
 8001260:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001262:	2302      	movs	r3, #2
 8001264:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	486b      	ldr	r0, [pc, #428]	; (8001420 <init_adc+0x290>)
 8001272:	f7ff fbd5 	bl	8000a20 <GPIO_Init>


	/*  Initialise DMA */
	DMA_StructInit(&DMA_Init_struct);							// reset struct
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fa78 	bl	8000770 <DMA_StructInit>

	/* config of DMA */
	DMA_Init_struct.DMA_Channel = DMA_Channel_0; 				/* See Tab 43 */
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
	DMA_Init_struct.DMA_BufferSize = NUM_CHANNELS;				/*  13adc channels */
 8001284:	230d      	movs	r3, #13
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_Init_struct.DMA_DIR = DMA_DIR_PeripheralToMemory; 		/* ADC to mem */
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init_struct.DMA_FIFOMode = DMA_FIFOMode_Disable; 		/* no FIFO */
 800128c:	2300      	movs	r3, #0
 800128e:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init_struct.DMA_FIFOThreshold = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_Init_struct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001294:	2300      	movs	r3, #0
 8001296:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_Init_struct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001298:	2300      	movs	r3, #0
 800129a:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init_struct.DMA_Mode = DMA_Mode_Circular; 				/* circular buffer */
 800129c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a0:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_Init_struct.DMA_Priority = DMA_Priority_High; 			/* high priority */
 80012a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init_struct.DMA_Memory0BaseAddr = (uint32_t)ADCBuffer; 	/* target addr */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init_struct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; /* 16 bit */
 80012ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init_struct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <init_adc+0x294>)
 80012b4:	623b      	str	r3, [r7, #32]
	DMA_Init_struct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80012b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ba:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_Init_struct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80012bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_Init_struct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA2_Stream0, &DMA_Init_struct); 					/* See Table 43 for mapping */
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	4856      	ldr	r0, [pc, #344]	; (8001428 <init_adc+0x298>)
 80012ce:	f7ff f9f7 	bl	80006c0 <DMA_Init>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 80012d2:	2101      	movs	r1, #1
 80012d4:	4854      	ldr	r0, [pc, #336]	; (8001428 <init_adc+0x298>)
 80012d6:	f7ff fa83 	bl	80007e0 <DMA_Cmd>

	/*Initialize ADC*/
	ADC_StructInit(&adc_init_struct);						//populates structs with reset defaults
 80012da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f840 	bl	8000364 <ADC_StructInit>
	ADC_CommonStructInit(&adc_com_init_struct);
 80012e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f883 	bl	80003f4 <ADC_CommonStructInit>
	ADC_Cmd(ADC1, DISABLE);
 80012ee:	2100      	movs	r1, #0
 80012f0:	484e      	ldr	r0, [pc, #312]	; (800142c <init_adc+0x29c>)
 80012f2:	f7ff f895 	bl	8000420 <ADC_Cmd>
	ADC_DeInit();
 80012f6:	f7fe ffd1 	bl	800029c <ADC_DeInit>

	/* init ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80012fa:	2101      	movs	r1, #1
 80012fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001300:	f7ff fcb0 	bl	8000c64 <RCC_APB2PeriphClockCmd>

	/*Initialize Common ADC */
	adc_com_init_struct.ADC_Mode = ADC_Mode_Independent;
 8001304:	2300      	movs	r3, #0
 8001306:	65bb      	str	r3, [r7, #88]	; 0x58
	adc_com_init_struct.ADC_Prescaler = ADC_Prescaler_Div2;
 8001308:	2300      	movs	r3, #0
 800130a:	65fb      	str	r3, [r7, #92]	; 0x5c
	adc_com_init_struct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800130c:	2300      	movs	r3, #0
 800130e:	663b      	str	r3, [r7, #96]	; 0x60
	adc_com_init_struct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
 8001310:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001314:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInit(&adc_com_init_struct);
 8001316:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f842 	bl	80003a4 <ADC_CommonInit>

	/* Initialize ADC1 */
	adc_init_struct.ADC_Resolution = ADC_Resolution_12b;
 8001320:	2300      	movs	r3, #0
 8001322:	66bb      	str	r3, [r7, #104]	; 0x68
	adc_init_struct.ADC_ScanConvMode = ENABLE;
 8001324:	2301      	movs	r3, #1
 8001326:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	adc_init_struct.ADC_ContinuousConvMode = DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	adc_init_struct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 8001330:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001334:	673b      	str	r3, [r7, #112]	; 0x70
	adc_init_struct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 8001336:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800133a:	677b      	str	r3, [r7, #116]	; 0x74
	adc_init_struct.ADC_DataAlign = ADC_DataAlign_Right;
 800133c:	2300      	movs	r3, #0
 800133e:	67bb      	str	r3, [r7, #120]	; 0x78
	adc_init_struct.ADC_NbrOfConversion = NUM_CHANNELS; /* 5 channels in total */
 8001340:	230d      	movs	r3, #13
 8001342:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	ADC_Init(ADC1, &adc_init_struct);
 8001346:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800134a:	4619      	mov	r1, r3
 800134c:	4837      	ldr	r0, [pc, #220]	; (800142c <init_adc+0x29c>)
 800134e:	f7fe ffb3 	bl	80002b8 <ADC_Init>

	/* Configure channels */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_480Cycles);		//VFO-Amplitude
 8001352:	2307      	movs	r3, #7
 8001354:	2201      	movs	r2, #1
 8001356:	2100      	movs	r1, #0
 8001358:	4834      	ldr	r0, [pc, #208]	; (800142c <init_adc+0x29c>)
 800135a:	f7ff f87d 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_480Cycles);		//VFO-Frequency
 800135e:	2307      	movs	r3, #7
 8001360:	2202      	movs	r2, #2
 8001362:	2101      	movs	r1, #1
 8001364:	4831      	ldr	r0, [pc, #196]	; (800142c <init_adc+0x29c>)
 8001366:	f7ff f877 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_480Cycles);		//LFO-Amplitude
 800136a:	2307      	movs	r3, #7
 800136c:	2203      	movs	r2, #3
 800136e:	2102      	movs	r1, #2
 8001370:	482e      	ldr	r0, [pc, #184]	; (800142c <init_adc+0x29c>)
 8001372:	f7ff f871 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_480Cycles);		//LFO-Frequency
 8001376:	2307      	movs	r3, #7
 8001378:	2204      	movs	r2, #4
 800137a:	2103      	movs	r1, #3
 800137c:	482b      	ldr	r0, [pc, #172]	; (800142c <init_adc+0x29c>)
 800137e:	f7ff f86b 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 5, ADC_SampleTime_480Cycles);		//VCO-Volume
 8001382:	2307      	movs	r3, #7
 8001384:	2205      	movs	r2, #5
 8001386:	2104      	movs	r1, #4
 8001388:	4828      	ldr	r0, [pc, #160]	; (800142c <init_adc+0x29c>)
 800138a:	f7ff f865 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 6, ADC_SampleTime_480Cycles);		//ENVELOPE-Attack
 800138e:	2307      	movs	r3, #7
 8001390:	2206      	movs	r2, #6
 8001392:	2105      	movs	r1, #5
 8001394:	4825      	ldr	r0, [pc, #148]	; (800142c <init_adc+0x29c>)
 8001396:	f7ff f85f 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 7, ADC_SampleTime_480Cycles);		//ENVELOPE-decay
 800139a:	2307      	movs	r3, #7
 800139c:	2207      	movs	r2, #7
 800139e:	2106      	movs	r1, #6
 80013a0:	4822      	ldr	r0, [pc, #136]	; (800142c <init_adc+0x29c>)
 80013a2:	f7ff f859 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 8, ADC_SampleTime_480Cycles);		//ENVELOPE-Sustain
 80013a6:	2307      	movs	r3, #7
 80013a8:	2208      	movs	r2, #8
 80013aa:	2107      	movs	r1, #7
 80013ac:	481f      	ldr	r0, [pc, #124]	; (800142c <init_adc+0x29c>)
 80013ae:	f7ff f853 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 9, ADC_SampleTime_480Cycles);		//ENVELOPE-Release
 80013b2:	2307      	movs	r3, #7
 80013b4:	2209      	movs	r2, #9
 80013b6:	2108      	movs	r1, #8
 80013b8:	481c      	ldr	r0, [pc, #112]	; (800142c <init_adc+0x29c>)
 80013ba:	f7ff f84d 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 10, ADC_SampleTime_480Cycles);	//FILTER-FreqLow
 80013be:	2307      	movs	r3, #7
 80013c0:	220a      	movs	r2, #10
 80013c2:	2109      	movs	r1, #9
 80013c4:	4819      	ldr	r0, [pc, #100]	; (800142c <init_adc+0x29c>)
 80013c6:	f7ff f847 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 11, ADC_SampleTime_480Cycles);	//FILTER-FreqHigh
 80013ca:	2307      	movs	r3, #7
 80013cc:	220b      	movs	r2, #11
 80013ce:	210a      	movs	r1, #10
 80013d0:	4816      	ldr	r0, [pc, #88]	; (800142c <init_adc+0x29c>)
 80013d2:	f7ff f841 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 12, ADC_SampleTime_480Cycles);	//FILTER-FreqResonance
 80013d6:	2307      	movs	r3, #7
 80013d8:	220c      	movs	r2, #12
 80013da:	210b      	movs	r1, #11
 80013dc:	4813      	ldr	r0, [pc, #76]	; (800142c <init_adc+0x29c>)
 80013de:	f7ff f83b 	bl	8000458 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 13, ADC_SampleTime_480Cycles);	//FILTER-FreqGain
 80013e2:	2307      	movs	r3, #7
 80013e4:	220d      	movs	r2, #13
 80013e6:	210e      	movs	r1, #14
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <init_adc+0x29c>)
 80013ea:	f7ff f835 	bl	8000458 <ADC_RegularChannelConfig>


	/* Enable ADC1 DMA */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);			//enables DMA request after all adc conversions
 80013ee:	2101      	movs	r1, #1
 80013f0:	480e      	ldr	r0, [pc, #56]	; (800142c <init_adc+0x29c>)
 80013f2:	f7ff f917 	bl	8000624 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 80013f6:	2101      	movs	r1, #1
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <init_adc+0x29c>)
 80013fa:	f7ff f8f7 	bl	80005ec <ADC_DMACmd>

	/* Enable ADC1 **************************************************************/
	ADC_Cmd(ADC1, ENABLE);
 80013fe:	2101      	movs	r1, #1
 8001400:	480a      	ldr	r0, [pc, #40]	; (800142c <init_adc+0x29c>)
 8001402:	f7ff f80d 	bl	8000420 <ADC_Cmd>

	TIM_Cmd(TIM2, ENABLE);		//This could be dine in the main however gonna leave it here
 8001406:	2101      	movs	r1, #1
 8001408:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800140c:	f7ff fd5e 	bl	8000ecc <TIM_Cmd>



}
 8001410:	bf00      	nop
 8001412:	3780      	adds	r7, #128	; 0x80
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	4001204c 	.word	0x4001204c
 8001428:	40026410 	.word	0x40026410
 800142c:	40012000 	.word	0x40012000

08001430 <init_gpios>:
/*
 * Sets up the 5 position selectors and TIM4 to be used to debounce
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */

void init_gpios(){
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct;
	NVIC_InitTypeDef TIM4_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE); 			//This is already turned on in ADC Init function
 8001436:	2101      	movs	r1, #1
 8001438:	2004      	movs	r0, #4
 800143a:	f7ff fbd3 	bl	8000be4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE);
 800143e:	2101      	movs	r1, #1
 8001440:	2010      	movs	r0, #16
 8001442:	f7ff fbcf 	bl	8000be4 <RCC_AHB1PeriphClockCmd>
	 * PE12 	lfo_sine
	 * PE13		lfo_sawtooth
	 * PE14		lfo_square
	 * PE15		lfo_triangle
	 */
	GPIO_StructInit(&GPIO_InitStructure);							// Default values
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fb76 	bl	8000b3c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8001450:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001454:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4619      	mov	r1, r3
 800146e:	484e      	ldr	r0, [pc, #312]	; (80015a8 <init_gpios+0x178>)
 8001470:	f7ff fad6 	bl	8000a20 <GPIO_Init>

	/*
	 * C bank pins
	 * PC6		lfo_other2
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fb5f 	bl	8000b3c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6;
 800147e:	2340      	movs	r3, #64	; 0x40
 8001480:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no pull
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	4619      	mov	r1, r3
 800149a:	4844      	ldr	r0, [pc, #272]	; (80015ac <init_gpios+0x17c>)
 800149c:	f7ff fac0 	bl	8000a20 <GPIO_Init>


	/*Configure Tim4 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80014a0:	2101      	movs	r1, #1
 80014a2:	2004      	movs	r0, #4
 80014a4:	f7ff fbbe 	bl	8000c24 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim4_base_struct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fcf3 	bl	8000e98 <TIM_TimeBaseStructInit>
	tim4_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	83bb      	strh	r3, [r7, #28]
	tim4_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80014b6:	2300      	movs	r3, #0
 80014b8:	82fb      	strh	r3, [r7, #22]
	tim4_base_struct.TIM_Period = MYTIM4_PERIOD;
 80014ba:	f241 0368 	movw	r3, #4200	; 0x1068
 80014be:	61bb      	str	r3, [r7, #24]
	tim4_base_struct.TIM_Prescaler = myTIM4_PRESCALER;
 80014c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014c4:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM4, &tim4_base_struct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4838      	ldr	r0, [pc, #224]	; (80015b0 <init_gpios+0x180>)
 80014ce:	f7ff fc77 	bl	8000dc0 <TIM_TimeBaseInit>

	TIM4_NVIC_init_struct.NVIC_IRQChannel = TIM4_IRQn;
 80014d2:	231e      	movs	r3, #30
 80014d4:	713b      	strb	r3, [r7, #4]
	TIM4_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80014d6:	2301      	movs	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
	TIM4_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 80014da:	2300      	movs	r3, #0
 80014dc:	717b      	strb	r3, [r7, #5]
	TIM4_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 80014de:	2300      	movs	r3, #0
 80014e0:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM4_NVIC_init_struct);
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe fe77 	bl	80001d8 <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2101      	movs	r1, #1
 80014ee:	4830      	ldr	r0, [pc, #192]	; (80015b0 <init_gpios+0x180>)
 80014f0:	f7ff fd0c 	bl	8000f0c <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 80014f4:	2101      	movs	r1, #1
 80014f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014fa:	f7ff fbb3 	bl	8000c64 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 80014fe:	2106      	movs	r1, #6
 8001500:	2002      	movs	r0, #2
 8001502:	f7ff fc1b 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource7);
 8001506:	2107      	movs	r1, #7
 8001508:	2004      	movs	r0, #4
 800150a:	f7ff fc17 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource8);
 800150e:	2108      	movs	r1, #8
 8001510:	2004      	movs	r0, #4
 8001512:	f7ff fc13 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource9);
 8001516:	2109      	movs	r1, #9
 8001518:	2004      	movs	r0, #4
 800151a:	f7ff fc0f 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource10);
 800151e:	210a      	movs	r1, #10
 8001520:	2004      	movs	r0, #4
 8001522:	f7ff fc0b 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource11);
 8001526:	210b      	movs	r1, #11
 8001528:	2004      	movs	r0, #4
 800152a:	f7ff fc07 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource12);
 800152e:	210c      	movs	r1, #12
 8001530:	2004      	movs	r0, #4
 8001532:	f7ff fc03 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource13);
 8001536:	210d      	movs	r1, #13
 8001538:	2004      	movs	r0, #4
 800153a:	f7ff fbff 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource14);
 800153e:	210e      	movs	r1, #14
 8001540:	2004      	movs	r0, #4
 8001542:	f7ff fbfb 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource15);
 8001546:	210f      	movs	r1, #15
 8001548:	2004      	movs	r0, #4
 800154a:	f7ff fbf7 	bl	8000d3c <SYSCFG_EXTILineConfig>


	//init EXTI
	EXTI_init_struct.EXTI_Line = EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9 | EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15;
 800154e:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001552:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 8001554:	2301      	movs	r3, #1
 8001556:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 8001558:	2300      	movs	r3, #0
 800155a:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 800155c:	2308      	movs	r3, #8
 800155e:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f9d9 	bl	800091c <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI9_5_IRQn;
 800156a:	2317      	movs	r3, #23
 800156c:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800156e:	230f      	movs	r3, #15
 8001570:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8001572:	230f      	movs	r3, #15
 8001574:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8001576:	2301      	movs	r3, #1
 8001578:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe fe2a 	bl	80001d8 <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI15_10_IRQn;;
 8001584:	2328      	movs	r3, #40	; 0x28
 8001586:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001588:	230f      	movs	r3, #15
 800158a:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 800158c:	230f      	movs	r3, #15
 800158e:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8001590:	2301      	movs	r3, #1
 8001592:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fe1d 	bl	80001d8 <NVIC_Init>




}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40000800 	.word	0x40000800

080015b4 <init_push_buttons>:

/*
 * Initialzes the pushbutton and pushbutton interrupts and limiting timer,
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */
void  init_push_buttons(){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef tim3_base_struct;
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct, TIM3_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE); 			//This is already turned on in init gpio's but turn on incase
 80015ba:	2101      	movs	r1, #1
 80015bc:	2010      	movs	r0, #16
 80015be:	f7ff fb11 	bl	8000be4 <RCC_AHB1PeriphClockCmd>
	 * PE0		Menu up
	 * PE1		Menu down
	 * PE2		Menu back
	 * PE3		Menu enter
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fab8 	bl	8000b3c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 80015cc:	230f      	movs	r3, #15
 80015ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;				//medium
 80015d6:	2301      	movs	r3, #1
 80015d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//pull down
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	4619      	mov	r1, r3
 80015e8:	4843      	ldr	r0, [pc, #268]	; (80016f8 <init_push_buttons+0x144>)
 80015ea:	f7ff fa19 	bl	8000a20 <GPIO_Init>


	/*Configure Tim3 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80015ee:	2101      	movs	r1, #1
 80015f0:	2002      	movs	r0, #2
 80015f2:	f7ff fb17 	bl	8000c24 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim3_base_struct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fc4c 	bl	8000e98 <TIM_TimeBaseStructInit>
	tim3_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	83bb      	strh	r3, [r7, #28]
	tim3_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 8001604:	2300      	movs	r3, #0
 8001606:	82fb      	strh	r3, [r7, #22]
	tim3_base_struct.TIM_Period = MYTIM3_PERIOD;
 8001608:	f242 03d0 	movw	r3, #8400	; 0x20d0
 800160c:	61bb      	str	r3, [r7, #24]
	tim3_base_struct.TIM_Prescaler = myTIM3_PRESCALER;
 800160e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001612:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM3, &tim3_base_struct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4838      	ldr	r0, [pc, #224]	; (80016fc <init_push_buttons+0x148>)
 800161c:	f7ff fbd0 	bl	8000dc0 <TIM_TimeBaseInit>

	TIM3_NVIC_init_struct.NVIC_IRQChannel = TIM3_IRQn;
 8001620:	231d      	movs	r3, #29
 8001622:	713b      	strb	r3, [r7, #4]
	TIM3_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8001624:	2301      	movs	r3, #1
 8001626:	71fb      	strb	r3, [r7, #7]
	TIM3_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8001628:	2300      	movs	r3, #0
 800162a:	717b      	strb	r3, [r7, #5]
	TIM3_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 800162c:	2300      	movs	r3, #0
 800162e:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM3_NVIC_init_struct);
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fdd0 	bl	80001d8 <NVIC_Init>

	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8001638:	2201      	movs	r2, #1
 800163a:	2101      	movs	r1, #1
 800163c:	482f      	ldr	r0, [pc, #188]	; (80016fc <init_push_buttons+0x148>)
 800163e:	f7ff fc65 	bl	8000f0c <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8001642:	2101      	movs	r1, #1
 8001644:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001648:	f7ff fb0c 	bl	8000c64 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource0);
 800164c:	2100      	movs	r1, #0
 800164e:	2004      	movs	r0, #4
 8001650:	f7ff fb74 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource1);
 8001654:	2101      	movs	r1, #1
 8001656:	2004      	movs	r0, #4
 8001658:	f7ff fb70 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource2);
 800165c:	2102      	movs	r1, #2
 800165e:	2004      	movs	r0, #4
 8001660:	f7ff fb6c 	bl	8000d3c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource3);
 8001664:	2103      	movs	r1, #3
 8001666:	2004      	movs	r0, #4
 8001668:	f7ff fb68 	bl	8000d3c <SYSCFG_EXTILineConfig>



	//init EXTI
	EXTI_init_struct.EXTI_Line = EXTI_Line0 | EXTI_Line1 | EXTI_Line2 | EXTI_Line3;
 800166c:	230f      	movs	r3, #15
 800166e:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 8001670:	2301      	movs	r3, #1
 8001672:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 8001674:	2300      	movs	r3, #0
 8001676:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 8001678:	2308      	movs	r3, #8
 800167a:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff f94b 	bl	800091c <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI0_IRQn;
 8001686:	2306      	movs	r3, #6
 8001688:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800168a:	230f      	movs	r3, #15
 800168c:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 800168e:	230f      	movs	r3, #15
 8001690:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8001692:	2301      	movs	r3, #1
 8001694:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fd9c 	bl	80001d8 <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI1_IRQn;;
 80016a0:	2307      	movs	r3, #7
 80016a2:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80016a4:	230f      	movs	r3, #15
 80016a6:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80016a8:	230f      	movs	r3, #15
 80016aa:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fd8f 	bl	80001d8 <NVIC_Init>
	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI2_IRQn;
 80016ba:	2308      	movs	r3, #8
 80016bc:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80016be:	230f      	movs	r3, #15
 80016c0:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80016c2:	230f      	movs	r3, #15
 80016c4:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fd82 	bl	80001d8 <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI3_IRQn;;
 80016d4:	2309      	movs	r3, #9
 80016d6:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80016d8:	230f      	movs	r3, #15
 80016da:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80016dc:	230f      	movs	r3, #15
 80016de:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80016e0:	2301      	movs	r3, #1
 80016e2:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fd75 	bl	80001d8 <NVIC_Init>


}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40000400 	.word	0x40000400

08001700 <init_parallel>:

}



void init_parallel(){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE); 			//This is already turned on in init gpio's but turn on incase
 8001706:	2101      	movs	r1, #1
 8001708:	2010      	movs	r0, #16
 800170a:	f7ff fa6b 	bl	8000be4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE); 			//This is already turned on in init gpio's but turn on incase
 800170e:	2101      	movs	r1, #1
 8001710:	2008      	movs	r0, #8
 8001712:	f7ff fa67 	bl	8000be4 <RCC_AHB1PeriphClockCmd>
	 * PC11		LCD DB2
	 * PC13		LCD DB3
	 * PC14 	LCD DB4
	 * PC15		LCD DB5
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 8001716:	463b      	mov	r3, r7
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fa0f 	bl	8000b3c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_2 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800171e:	f64e 3384 	movw	r3, #60292	; 0xeb84
 8001722:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;					//CS output
 8001724:	2301      	movs	r3, #1
 8001726:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;				//medium
 8001728:	2301      	movs	r3, #1
 800172a:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				// no pull up/down
 800172c:	2300      	movs	r3, #0
 800172e:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001730:	463b      	mov	r3, r7
 8001732:	4619      	mov	r1, r3
 8001734:	480e      	ldr	r0, [pc, #56]	; (8001770 <init_parallel+0x70>)
 8001736:	f7ff f973 	bl	8000a20 <GPIO_Init>
	 * D bank pins
	 * PD13		LCD DB6
	 * PD14		LCD DB7
	 * PD15		LCD RS
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 800173a:	463b      	mov	r3, r7
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff f9fd 	bl	8000b3c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8001742:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001746:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;					//CS output
 8001748:	2301      	movs	r3, #1
 800174a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;				//medium
 800174c:	2301      	movs	r3, #1
 800174e:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				// no pull up/down
 8001750:	2300      	movs	r3, #0
 8001752:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001754:	463b      	mov	r3, r7
 8001756:	4619      	mov	r1, r3
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <init_parallel+0x74>)
 800175a:	f7ff f961 	bl	8000a20 <GPIO_Init>

	//set enable high
	GPIO_ResetBits(GPIOC, GPIO_Pin_2);
 800175e:	2104      	movs	r1, #4
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <init_parallel+0x70>)
 8001762:	f7ff fa2f 	bl	8000bc4 <GPIO_ResetBits>

}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00

08001778 <delay>:
#include "lcd.h"
#include "stm32f4xx_spi.h"

int g_lcd_pos;

void delay(int delay){
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	for(int i=delay;i>0;i--){
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e002      	b.n	800178c <delay+0x14>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3b01      	subs	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	dcf9      	bgt.n	8001786 <delay+0xe>

	}
	return;
 8001792:	bf00      	nop
}
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <SPI_TX>:



void SPI_TX(int tx){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

	//RS
	if(tx & 0x0200){
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <SPI_TX+0x1e>
		GPIO_SetBits(GPIOD, GPIO_Pin_15);
 80017b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b6:	4853      	ldr	r0, [pc, #332]	; (8001904 <SPI_TX+0x164>)
 80017b8:	f7ff f9f4 	bl	8000ba4 <GPIO_SetBits>
 80017bc:	e004      	b.n	80017c8 <SPI_TX+0x28>
	}else{
		GPIO_ResetBits(GPIOD, GPIO_Pin_15);
 80017be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c2:	4850      	ldr	r0, [pc, #320]	; (8001904 <SPI_TX+0x164>)
 80017c4:	f7ff f9fe 	bl	8000bc4 <GPIO_ResetBits>
	}

	//R/W
	if(tx & 0x0100){
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <SPI_TX+0x3c>
		GPIO_SetBits(GPIOC, GPIO_Pin_7);
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	484c      	ldr	r0, [pc, #304]	; (8001908 <SPI_TX+0x168>)
 80017d6:	f7ff f9e5 	bl	8000ba4 <GPIO_SetBits>
 80017da:	e003      	b.n	80017e4 <SPI_TX+0x44>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_7);
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	484a      	ldr	r0, [pc, #296]	; (8001908 <SPI_TX+0x168>)
 80017e0:	f7ff f9f0 	bl	8000bc4 <GPIO_ResetBits>
	}

	GPIO_SetBits(GPIOC, GPIO_Pin_2);
 80017e4:	2104      	movs	r1, #4
 80017e6:	4848      	ldr	r0, [pc, #288]	; (8001908 <SPI_TX+0x168>)
 80017e8:	f7ff f9dc 	bl	8000ba4 <GPIO_SetBits>

	//DB0
	if(tx & 0x01){
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <SPI_TX+0x62>
		GPIO_SetBits(GPIOC, GPIO_Pin_8);
 80017f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fa:	4843      	ldr	r0, [pc, #268]	; (8001908 <SPI_TX+0x168>)
 80017fc:	f7ff f9d2 	bl	8000ba4 <GPIO_SetBits>
 8001800:	e004      	b.n	800180c <SPI_TX+0x6c>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_8);
 8001802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001806:	4840      	ldr	r0, [pc, #256]	; (8001908 <SPI_TX+0x168>)
 8001808:	f7ff f9dc 	bl	8000bc4 <GPIO_ResetBits>
	}
	//DB1
	if(tx & 0x02){
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <SPI_TX+0x82>
		GPIO_SetBits(GPIOC, GPIO_Pin_9);
 8001816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800181a:	483b      	ldr	r0, [pc, #236]	; (8001908 <SPI_TX+0x168>)
 800181c:	f7ff f9c2 	bl	8000ba4 <GPIO_SetBits>
 8001820:	e004      	b.n	800182c <SPI_TX+0x8c>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_9);
 8001822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001826:	4838      	ldr	r0, [pc, #224]	; (8001908 <SPI_TX+0x168>)
 8001828:	f7ff f9cc 	bl	8000bc4 <GPIO_ResetBits>
	}
	//DB2
	if(tx & 0x04){
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <SPI_TX+0xa2>
		GPIO_SetBits(GPIOC, GPIO_Pin_11);
 8001836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183a:	4833      	ldr	r0, [pc, #204]	; (8001908 <SPI_TX+0x168>)
 800183c:	f7ff f9b2 	bl	8000ba4 <GPIO_SetBits>
 8001840:	e004      	b.n	800184c <SPI_TX+0xac>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_11);
 8001842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001846:	4830      	ldr	r0, [pc, #192]	; (8001908 <SPI_TX+0x168>)
 8001848:	f7ff f9bc 	bl	8000bc4 <GPIO_ResetBits>
	}
	//DB3
	if(tx & 0x08){
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <SPI_TX+0xc2>
		GPIO_SetBits(GPIOC, GPIO_Pin_13);
 8001856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185a:	482b      	ldr	r0, [pc, #172]	; (8001908 <SPI_TX+0x168>)
 800185c:	f7ff f9a2 	bl	8000ba4 <GPIO_SetBits>
 8001860:	e004      	b.n	800186c <SPI_TX+0xcc>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 8001862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001866:	4828      	ldr	r0, [pc, #160]	; (8001908 <SPI_TX+0x168>)
 8001868:	f7ff f9ac 	bl	8000bc4 <GPIO_ResetBits>
	}
	//DB4
	if(tx & 0x10){
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <SPI_TX+0xe2>
		GPIO_SetBits(GPIOC, GPIO_Pin_14);
 8001876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800187a:	4823      	ldr	r0, [pc, #140]	; (8001908 <SPI_TX+0x168>)
 800187c:	f7ff f992 	bl	8000ba4 <GPIO_SetBits>
 8001880:	e004      	b.n	800188c <SPI_TX+0xec>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_14);
 8001882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001886:	4820      	ldr	r0, [pc, #128]	; (8001908 <SPI_TX+0x168>)
 8001888:	f7ff f99c 	bl	8000bc4 <GPIO_ResetBits>
	}
	//DB5
	if(tx & 0x20){
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <SPI_TX+0x102>
		GPIO_SetBits(GPIOC, GPIO_Pin_15);
 8001896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189a:	481b      	ldr	r0, [pc, #108]	; (8001908 <SPI_TX+0x168>)
 800189c:	f7ff f982 	bl	8000ba4 <GPIO_SetBits>
 80018a0:	e004      	b.n	80018ac <SPI_TX+0x10c>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_15);
 80018a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a6:	4818      	ldr	r0, [pc, #96]	; (8001908 <SPI_TX+0x168>)
 80018a8:	f7ff f98c 	bl	8000bc4 <GPIO_ResetBits>
	}
	//DB6
	if(tx & 0x40){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <SPI_TX+0x122>
		GPIO_SetBits(GPIOD, GPIO_Pin_13);
 80018b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ba:	4812      	ldr	r0, [pc, #72]	; (8001904 <SPI_TX+0x164>)
 80018bc:	f7ff f972 	bl	8000ba4 <GPIO_SetBits>
 80018c0:	e004      	b.n	80018cc <SPI_TX+0x12c>
	}else{
		GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 80018c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c6:	480f      	ldr	r0, [pc, #60]	; (8001904 <SPI_TX+0x164>)
 80018c8:	f7ff f97c 	bl	8000bc4 <GPIO_ResetBits>
	}
	//DB7
	if(tx & 0x80){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <SPI_TX+0x142>
		GPIO_SetBits(GPIOD, GPIO_Pin_14);
 80018d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018da:	480a      	ldr	r0, [pc, #40]	; (8001904 <SPI_TX+0x164>)
 80018dc:	f7ff f962 	bl	8000ba4 <GPIO_SetBits>
 80018e0:	e004      	b.n	80018ec <SPI_TX+0x14c>
	}else{
		GPIO_ResetBits(GPIOD, GPIO_Pin_14);
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <SPI_TX+0x164>)
 80018e8:	f7ff f96c 	bl	8000bc4 <GPIO_ResetBits>
	}

	delay(20);
 80018ec:	2014      	movs	r0, #20
 80018ee:	f7ff ff43 	bl	8001778 <delay>

	//cycle enable bits
	GPIO_ResetBits(GPIOC, GPIO_Pin_2);
 80018f2:	2104      	movs	r1, #4
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <SPI_TX+0x168>)
 80018f6:	f7ff f965 	bl	8000bc4 <GPIO_ResetBits>
//	while(SPI2->SR & SPI_SR_BSY);					//wait for SPI2 to be ready
//	SPI_I2S_SendData(SPI2, tx);
//	while(SPI2->SR & SPI_SR_BSY);					//wait for SPI2 to be done
//	GPIO_SetBits(GPIOC, GPIO_Pin_5);				//chip select high

}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40020800 	.word	0x40020800

0800190c <LCD_TX>:

int LCD_TX(unsigned int RS,unsigned int RW, unsigned int data)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  int temp = data;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	617b      	str	r3, [r7, #20]
  temp += (RW<<8);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	021a      	lsls	r2, r3, #8
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4413      	add	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
  temp+= (RS<<9);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	025a      	lsls	r2, r3, #9
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	4413      	add	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_ResetBits(GPIOC, GPIO_Pin_5);				//chip select low
 8001930:	2120      	movs	r1, #32
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <LCD_TX+0x44>)
 8001934:	f7ff f946 	bl	8000bc4 <GPIO_ResetBits>
  SPI_TX(temp);
 8001938:	6978      	ldr	r0, [r7, #20]
 800193a:	f7ff ff31 	bl	80017a0 <SPI_TX>
  GPIO_SetBits(GPIOC, GPIO_Pin_5);				//chip select high
 800193e:	2120      	movs	r1, #32
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <LCD_TX+0x44>)
 8001942:	f7ff f92f 	bl	8000ba4 <GPIO_SetBits>
  return temp;
 8001946:	697b      	ldr	r3, [r7, #20]

}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40020800 	.word	0x40020800

08001954 <LCD_CLEAR>:

void LCD_CLEAR(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
    int rs = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
    int rw = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
    int data = 0b1;
 8001962:	2301      	movs	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
    LCD_TX(rs,rw,data);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ffcd 	bl	800190c <LCD_TX>
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop

0800197c <LCD_HOME>:

void LCD_HOME(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
    int rs = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
    int rw = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
    int data = 0b10;
 800198a:	2302      	movs	r3, #2
 800198c:	607b      	str	r3, [r7, #4]
    LCD_TX(rs,rw,data);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ffb9 	bl	800190c <LCD_TX>
    g_lcd_pos = 0;
 800199a:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <LCD_HOME+0x2c>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200000e0 	.word	0x200000e0

080019ac <LCD_MODE>:

void LCD_MODE(int incr,int shift)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
    int rs = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
    int rw = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
    int data = (incr&0b1)<<1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60fb      	str	r3, [r7, #12]
    data += (shift & 0b1);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4413      	add	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
    data += (0b1<<2);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3304      	adds	r3, #4
 80019d8:	60fb      	str	r3, [r7, #12]
    LCD_TX(rs,rw,data);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	6939      	ldr	r1, [r7, #16]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff93 	bl	800190c <LCD_TX>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop

080019f0 <LCD_DISPLAY>:

void LCD_DISPLAY(int on,int cursor, int blink)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
    int rs = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    int rw = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
    int data = (0b1<<3);
 8001a04:	2308      	movs	r3, #8
 8001a06:	617b      	str	r3, [r7, #20]
    data += (on&0b1)<<2;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	4413      	add	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
    data += (cursor&0b1)<<1;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4413      	add	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]
    data += (blink &0b1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
    LCD_TX(rs,rw,data);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff68 	bl	800190c <LCD_TX>
}
 8001a3c:	bf00      	nop
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <LCD_FUNCTION>:
    data += (direction&0b1)<<2;
    LCD_TX(rs,rw,data);
}

void LCD_FUNCTION(int datalength, int fonttable)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
    int rs = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
    int rw = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
    int data = (0b1<<5);
 8001a56:	2320      	movs	r3, #32
 8001a58:	60fb      	str	r3, [r7, #12]
    data += (datalength&0b1)<<4;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
    data += 0b1<<3;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	60fb      	str	r3, [r7, #12]
    data += (fonttable&0b111);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
    LCD_TX(rs,rw,data);
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	6939      	ldr	r1, [r7, #16]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff43 	bl	800190c <LCD_TX>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop

08001a90 <LCD_SETDDRAM>:
    data += (ADdressCG & 0b111111);
    LCD_TX(rs,rw,data);
}

void LCD_SETDDRAM(int DDADress)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    int rs = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
    int rw = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
    int data = (0b1<<7);
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	60fb      	str	r3, [r7, #12]
    data += (DDADress & 0b1111111);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
    LCD_TX(rs,rw,data);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	6939      	ldr	r1, [r7, #16]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff28 	bl	800190c <LCD_TX>
}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <LCD_WRITE>:
    //Bits 0-6 are address
}


void LCD_WRITE(int data)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    int rs = 1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
    int rw = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
    LCD_TX(rs,rw,data);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff16 	bl	800190c <LCD_TX>
}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <lcd_init>:

void lcd_init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
//	SPI_TX(0x0002);										//return home
//	SPI_TX(0x02FF);										//write something


  //SPI_TX(0b0000000001);//Clear Display
  LCD_CLEAR();
 8001aec:	f7ff ff32 	bl	8001954 <LCD_CLEAR>
  delay(0xffff);
 8001af0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001af4:	f7ff fe40 	bl	8001778 <delay>
  //LCD_TX(0,0,0b00111011);  //Function Set: 8 Bit, European 2
  LCD_FUNCTION(LCD_8BIT,LCD_EUROPE2);
 8001af8:	2103      	movs	r1, #3
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff ffa2 	bl	8001a44 <LCD_FUNCTION>
  delay(0xffff);
 8001b00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b04:	f7ff fe38 	bl	8001778 <delay>
  //SPI_TX(0b0000001011);//Display off
  LCD_DISPLAY(LCD_OFF,LCD_CURSOR,LCD_BLINK);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff ff6f 	bl	80019f0 <LCD_DISPLAY>
  delay(0xffff);
 8001b12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b16:	f7ff fe2f 	bl	8001778 <delay>
  //SPI_TX(0b0000000001);//Clear Display
  LCD_CLEAR();
 8001b1a:	f7ff ff1b 	bl	8001954 <LCD_CLEAR>
  delay(0xffff);
 8001b1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b22:	f7ff fe29 	bl	8001778 <delay>
  //SPI_TX(0b0000000110);
  LCD_MODE(LCD_ENTRY_INCR,LCD_ENTRY_NOSHIFT);
 8001b26:	2100      	movs	r1, #0
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7ff ff3f 	bl	80019ac <LCD_MODE>
  delay(0xffff);
 8001b2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b32:	f7ff fe21 	bl	8001778 <delay>
  //SPI_TX(0b0000000010); // Return home
  LCD_HOME();
 8001b36:	f7ff ff21 	bl	800197c <LCD_HOME>
  delay(0xffff);
 8001b3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b3e:	f7ff fe1b 	bl	8001778 <delay>
  //SPI_TX(0b0000001100);//Display on
  LCD_DISPLAY(LCD_ON,LCD_CURSOR,LCD_BLINK);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2101      	movs	r1, #1
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff ff52 	bl	80019f0 <LCD_DISPLAY>
  delay(0xffff);
 8001b4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b50:	f7ff fe12 	bl	8001778 <delay>
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <lcd_writeline>:
      //LCD_READSTATUS(busy,realaddr);
      addr++;
}

void lcd_writeline(char * str, int row)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
      int addr;
      switch(row){
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d817      	bhi.n	8001b98 <lcd_writeline+0x40>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <lcd_writeline+0x18>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b87 	.word	0x08001b87
 8001b78:	08001b8d 	.word	0x08001b8d
 8001b7c:	08001b93 	.word	0x08001b93
          case 0: addr = 0x0; break;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e00b      	b.n	8001b9e <lcd_writeline+0x46>
          case 1: addr = 0x40;break;
 8001b86:	2340      	movs	r3, #64	; 0x40
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	e008      	b.n	8001b9e <lcd_writeline+0x46>
          case 2: addr = 0x14;break;
 8001b8c:	2314      	movs	r3, #20
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e005      	b.n	8001b9e <lcd_writeline+0x46>
          case 3: addr = 0x54;break;
 8001b92:	2354      	movs	r3, #84	; 0x54
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e002      	b.n	8001b9e <lcd_writeline+0x46>
          default: addr=0x0;  break;}
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	bf00      	nop
      LCD_SETDDRAM(addr);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff ff76 	bl	8001a90 <LCD_SETDDRAM>
      delay(0xfff);
 8001ba4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ba8:	f7ff fde6 	bl	8001778 <delay>
      g_lcd_pos = addr;
 8001bac:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <lcd_writeline+0xac>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6013      	str	r3, [r2, #0]
      for(int i=0;i<strlen(str);i++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	e01a      	b.n	8001bee <lcd_writeline+0x96>
      {
          LCD_WRITE(str[i]);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff7f 	bl	8001ac4 <LCD_WRITE>
          delay(0xfff);
 8001bc6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001bca:	f7ff fdd5 	bl	8001778 <delay>
          //LCD_WRITE(str[i]);
          g_lcd_pos++;
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <lcd_writeline+0xac>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <lcd_writeline+0xac>)
 8001bd6:	6013      	str	r3, [r2, #0]
          if(i==20) i = strlen(str);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b14      	cmp	r3, #20
 8001bdc:	d104      	bne.n	8001be8 <lcd_writeline+0x90>
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe faf2 	bl	80001c8 <strlen>
 8001be4:	4603      	mov	r3, r0
 8001be6:	60bb      	str	r3, [r7, #8]
          case 3: addr = 0x54;break;
          default: addr=0x0;  break;}
      LCD_SETDDRAM(addr);
      delay(0xfff);
      g_lcd_pos = addr;
      for(int i=0;i<strlen(str);i++)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7fe faea 	bl	80001c8 <strlen>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8dd      	bhi.n	8001bb8 <lcd_writeline+0x60>
          delay(0xfff);
          //LCD_WRITE(str[i]);
          g_lcd_pos++;
          if(i==20) i = strlen(str);
      }
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200000e0 	.word	0x200000e0

08001c08 <main>:
**
**===========================================================================
*/

int main(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
  /*****************************This came with project just gona leave for now*******************************/
  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff f9ce 	bl	8000fb0 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff f9cb 	bl	8000fb0 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f7ff f9c8 	bl	8000fb0 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f7ff f9c5 	bl	8000fb0 <STM_EVAL_LEDInit>

  /* Turn on LEDs */
  STM_EVAL_LEDOn(LED3);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff f9f0 	bl	800100c <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED4);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff f9ed 	bl	800100c <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED5);
 8001c32:	2002      	movs	r0, #2
 8001c34:	f7ff f9ea 	bl	800100c <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED6);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f7ff f9e7 	bl	800100c <STM_EVAL_LEDOn>

  //used for testing the selector
  selector_state testvfo,testlfo;	//

  /* Used for Testing ADC Values can be thrown out*/
  uint16_t vfo_amp = ADCBuffer[0];
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <main+0x130>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t vfo_freq = ADCBuffer[1];
 8001c44:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <main+0x130>)
 8001c46:	885b      	ldrh	r3, [r3, #2]
 8001c48:	843b      	strh	r3, [r7, #32]
  uint16_t lfo_amp = ADCBuffer[2];
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <main+0x130>)
 8001c4c:	889b      	ldrh	r3, [r3, #4]
 8001c4e:	83fb      	strh	r3, [r7, #30]
  uint16_t lfo_freq = ADCBuffer[3];
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <main+0x130>)
 8001c52:	88db      	ldrh	r3, [r3, #6]
 8001c54:	83bb      	strh	r3, [r7, #28]
  uint16_t volume = ADCBuffer[4];
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <main+0x130>)
 8001c58:	891b      	ldrh	r3, [r3, #8]
 8001c5a:	837b      	strh	r3, [r7, #26]
  uint16_t env_attack = ADCBuffer[5];
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <main+0x130>)
 8001c5e:	895b      	ldrh	r3, [r3, #10]
 8001c60:	833b      	strh	r3, [r7, #24]
  uint16_t env_decay = ADCBuffer[6];
 8001c62:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <main+0x130>)
 8001c64:	899b      	ldrh	r3, [r3, #12]
 8001c66:	82fb      	strh	r3, [r7, #22]
  uint16_t env_sustain = ADCBuffer[7];
 8001c68:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <main+0x130>)
 8001c6a:	89db      	ldrh	r3, [r3, #14]
 8001c6c:	82bb      	strh	r3, [r7, #20]
  uint16_t env_release = ADCBuffer[8];
 8001c6e:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <main+0x130>)
 8001c70:	8a1b      	ldrh	r3, [r3, #16]
 8001c72:	827b      	strh	r3, [r7, #18]
  uint16_t fc_low = ADCBuffer[9];
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <main+0x130>)
 8001c76:	8a5b      	ldrh	r3, [r3, #18]
 8001c78:	823b      	strh	r3, [r7, #16]
  uint16_t fc_high = ADCBuffer[10];
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <main+0x130>)
 8001c7c:	8a9b      	ldrh	r3, [r3, #20]
 8001c7e:	81fb      	strh	r3, [r7, #14]
  uint16_t fc_resonance = ADCBuffer[11];
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <main+0x130>)
 8001c82:	8adb      	ldrh	r3, [r3, #22]
 8001c84:	81bb      	strh	r3, [r7, #12]
  uint16_t gain = ADCBuffer[12];
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <main+0x130>)
 8001c88:	8b1b      	ldrh	r3, [r3, #24]
 8001c8a:	817b      	strh	r3, [r7, #10]



  /**************************** Run Initialization functions timer for tim2 started in init_adc*****************************/

  menubutton.button=back;					//initializes menubutton state for startup
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <main+0x134>)
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
  init_gpios();								//initialize gpios
 8001c92:	f7ff fbcd 	bl	8001430 <init_gpios>
  init_push_buttons();						//initialize menu navigation buttons
 8001c96:	f7ff fc8d 	bl	80015b4 <init_push_buttons>
  init_adc(ADCBuffer);						//initialize ADC, do this last because it starts the timer
 8001c9a:	4827      	ldr	r0, [pc, #156]	; (8001d38 <main+0x130>)
 8001c9c:	f7ff fa78 	bl	8001190 <init_adc>
  //init_spi();								//initialize the SPI for LCD
  init_parallel();							//initializes all the GPIO's for parallel LCD communication
 8001ca0:	f7ff fd2e 	bl	8001700 <init_parallel>
  lcd_init();								//initializes LCD screen
 8001ca4:	f7ff ff20 	bl	8001ae8 <lcd_init>
  update_selector_state();					// get startup state
 8001ca8:	f000 fa40 	bl	800212c <update_selector_state>

  LCD_CLEAR();
 8001cac:	f7ff fe52 	bl	8001954 <LCD_CLEAR>
  LCD_WRITE(66);
 8001cb0:	2042      	movs	r0, #66	; 0x42
 8001cb2:	f7ff ff07 	bl	8001ac4 <LCD_WRITE>
  lcd_writeline("01234567890123456789",0);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4821      	ldr	r0, [pc, #132]	; (8001d40 <main+0x138>)
 8001cba:	f7ff ff4d 	bl	8001b58 <lcd_writeline>



  int i = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
  int j = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (1)
  {


	  // Waste some time
	  for (j = 0; j < 5000000; j++){
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cca:	e002      	b.n	8001cd2 <main+0xca>
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	3301      	adds	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <main+0x13c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	ddf8      	ble.n	8001ccc <main+0xc4>
	  }

	//used for testing wave selectors
	testlfo = lfo_state;
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <main+0x140>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	70fb      	strb	r3, [r7, #3]
	testvfo = vfo_state;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <main+0x144>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	70bb      	strb	r3, [r7, #2]

	//used for testing ADC
	vfo_amp = ADCBuffer[0];
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <main+0x130>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	847b      	strh	r3, [r7, #34]	; 0x22
	vfo_freq = ADCBuffer[1];
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <main+0x130>)
 8001cee:	885b      	ldrh	r3, [r3, #2]
 8001cf0:	843b      	strh	r3, [r7, #32]
	lfo_amp = ADCBuffer[2];
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <main+0x130>)
 8001cf4:	889b      	ldrh	r3, [r3, #4]
 8001cf6:	83fb      	strh	r3, [r7, #30]
	lfo_freq = ADCBuffer[3];
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <main+0x130>)
 8001cfa:	88db      	ldrh	r3, [r3, #6]
 8001cfc:	83bb      	strh	r3, [r7, #28]
	volume = ADCBuffer[4];
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <main+0x130>)
 8001d00:	891b      	ldrh	r3, [r3, #8]
 8001d02:	837b      	strh	r3, [r7, #26]
	env_attack = ADCBuffer[5];
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <main+0x130>)
 8001d06:	895b      	ldrh	r3, [r3, #10]
 8001d08:	833b      	strh	r3, [r7, #24]
	env_decay = ADCBuffer[6];
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <main+0x130>)
 8001d0c:	899b      	ldrh	r3, [r3, #12]
 8001d0e:	82fb      	strh	r3, [r7, #22]
	env_sustain = ADCBuffer[7];
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <main+0x130>)
 8001d12:	89db      	ldrh	r3, [r3, #14]
 8001d14:	82bb      	strh	r3, [r7, #20]
	env_release = ADCBuffer[8];
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <main+0x130>)
 8001d18:	8a1b      	ldrh	r3, [r3, #16]
 8001d1a:	827b      	strh	r3, [r7, #18]
	fc_low = ADCBuffer[9];
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <main+0x130>)
 8001d1e:	8a5b      	ldrh	r3, [r3, #18]
 8001d20:	823b      	strh	r3, [r7, #16]
	fc_high = ADCBuffer[10];
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <main+0x130>)
 8001d24:	8a9b      	ldrh	r3, [r3, #20]
 8001d26:	81fb      	strh	r3, [r7, #14]
	fc_resonance = ADCBuffer[11];
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <main+0x130>)
 8001d2a:	8adb      	ldrh	r3, [r3, #22]
 8001d2c:	81bb      	strh	r3, [r7, #12]
	gain = ADCBuffer[12];
 8001d2e:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <main+0x130>)
 8001d30:	8b1b      	ldrh	r3, [r3, #24]
 8001d32:	817b      	strh	r3, [r7, #10]

  }
 8001d34:	e7c7      	b.n	8001cc6 <main+0xbe>
 8001d36:	bf00      	nop
 8001d38:	200000c4 	.word	0x200000c4
 8001d3c:	200000bc 	.word	0x200000bc
 8001d40:	08002294 	.word	0x08002294
 8001d44:	004c4b3f 	.word	0x004c4b3f
 8001d48:	200000b9 	.word	0x200000b9
 8001d4c:	200000b8 	.word	0x200000b8

08001d50 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8001d5a:	bf00      	nop
}
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d82:	e003      	b.n	8001d8c <LoopCopyDataInit>

08001d84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d8a:	3104      	adds	r1, #4

08001d8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d8c:	480b      	ldr	r0, [pc, #44]	; (8001dbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d94:	d3f6      	bcc.n	8001d84 <CopyDataInit>
  ldr  r2, =_sbss
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d98:	e002      	b.n	8001da0 <LoopFillZerobss>

08001d9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d9c:	f842 3b04 	str.w	r3, [r2], #4

08001da0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001da2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001da4:	d3f9      	bcc.n	8001d9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001da6:	f000 f90f 	bl	8001fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f000 fa41 	bl	8002230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7ff ff2b 	bl	8001c08 <main>
  bx  lr    
 8001db2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001db4:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001db8:	080022cc 	.word	0x080022cc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001dbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dc0:	20000020 	.word	0x20000020
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001dc4:	20000020 	.word	0x20000020
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dc8:	200000e4 	.word	0x200000e4

08001dcc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <CAN1_RX0_IRQHandler>
	...

08001dd0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001de4:	e7fe      	b.n	8001de4 <HardFault_Handler+0x4>
 8001de6:	bf00      	nop

08001de8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001dec:	e7fe      	b.n	8001dec <MemManage_Handler+0x4>
 8001dee:	bf00      	nop

08001df0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001df4:	e7fe      	b.n	8001df4 <BusFault_Handler+0x4>
 8001df6:	bf00      	nop

08001df8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>
 8001dfe:	bf00      	nop

08001e00 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop

08001e10 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop

08001e20 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop

08001e40 <EXTI0_IRQHandler>:


/*
 * interrupt handler for up button
 */
void EXTI0_IRQHandler(void){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line0);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7fe fddb 	bl	8000a00 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <EXTI0_IRQHandler+0x2c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <EXTI0_IRQHandler+0x26>
		menubutton.button = up;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <EXTI0_IRQHandler+0x2c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <EXTI0_IRQHandler+0x2c>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4803      	ldr	r0, [pc, #12]	; (8001e70 <EXTI0_IRQHandler+0x30>)
 8001e62:	f7ff f833 	bl	8000ecc <TIM_Cmd>
	}
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200000bc 	.word	0x200000bc
 8001e70:	40000400 	.word	0x40000400

08001e74 <EXTI1_IRQHandler>:


/*
 * interrupt handler for down button
 */
void EXTI1_IRQHandler(void){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line1);
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f7fe fdc1 	bl	8000a00 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <EXTI1_IRQHandler+0x2c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <EXTI1_IRQHandler+0x26>
		menubutton.button = down;
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <EXTI1_IRQHandler+0x2c>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <EXTI1_IRQHandler+0x2c>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8001e92:	2101      	movs	r1, #1
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <EXTI1_IRQHandler+0x30>)
 8001e96:	f7ff f819 	bl	8000ecc <TIM_Cmd>
	}
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200000bc 	.word	0x200000bc
 8001ea4:	40000400 	.word	0x40000400

08001ea8 <EXTI2_IRQHandler>:


/*
 * interrupt handler for back button
 */
void EXTI2_IRQHandler(void){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line2);
 8001eac:	2004      	movs	r0, #4
 8001eae:	f7fe fda7 	bl	8000a00 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <EXTI2_IRQHandler+0x2c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <EXTI2_IRQHandler+0x26>
		menubutton.button = back;
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <EXTI2_IRQHandler+0x2c>)
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <EXTI2_IRQHandler+0x2c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <EXTI2_IRQHandler+0x30>)
 8001eca:	f7fe ffff 	bl	8000ecc <TIM_Cmd>
	}

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200000bc 	.word	0x200000bc
 8001ed8:	40000400 	.word	0x40000400

08001edc <EXTI3_IRQHandler>:


/*
 * interrupt handler for enter button
 */
void EXTI3_IRQHandler(void){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line3);
 8001ee0:	2008      	movs	r0, #8
 8001ee2:	f7fe fd8d 	bl	8000a00 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <EXTI3_IRQHandler+0x2c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <EXTI3_IRQHandler+0x26>
		menubutton.button = enter;
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <EXTI3_IRQHandler+0x2c>)
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <EXTI3_IRQHandler+0x2c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8001efa:	2101      	movs	r1, #1
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <EXTI3_IRQHandler+0x30>)
 8001efe:	f7fe ffe5 	bl	8000ecc <TIM_Cmd>
	}
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200000bc 	.word	0x200000bc
 8001f0c:	40000400 	.word	0x40000400

08001f10 <EXTI9_5_IRQHandler>:

//EXTI9_5_IRQn used for selector

void EXTI9_5_IRQHandler(void){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

	EXTI_ClearITPendingBit(EXTI_Line6 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
 8001f14:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8001f18:	f7fe fd72 	bl	8000a00 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){			//is debounce timer off
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <EXTI9_5_IRQHandler+0x28>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <EXTI9_5_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);								//turn on debounce timer
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <EXTI9_5_IRQHandler+0x28>)
 8001f2e:	f7fe ffcd 	bl	8000ecc <TIM_Cmd>
	}
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40000800 	.word	0x40000800

08001f3c <EXTI15_10_IRQHandler>:




//EXTI15_10_IRQn used for selector
void EXTI15_10_IRQHandler(void){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15);
 8001f40:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8001f44:	f7fe fd5c 	bl	8000a00 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){		//is debounce timer off
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <EXTI15_10_IRQHandler+0x28>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <EXTI15_10_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);							//turn on debounce timer
 8001f56:	2101      	movs	r1, #1
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <EXTI15_10_IRQHandler+0x28>)
 8001f5a:	f7fe ffb7 	bl	8000ecc <TIM_Cmd>
	}
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40000800 	.word	0x40000800

08001f68 <TIM3_IRQHandler>:



// Timer for limiting button pushes 100ms
void TIM3_IRQHandler(){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
		TIM_Cmd(TIM3, DISABLE);								//stop timer
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <TIM3_IRQHandler+0x20>)
 8001f70:	f7fe ffac 	bl	8000ecc <TIM_Cmd>
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);			//clear interrupt
 8001f74:	2101      	movs	r1, #1
 8001f76:	4804      	ldr	r0, [pc, #16]	; (8001f88 <TIM3_IRQHandler+0x20>)
 8001f78:	f7fe ffec 	bl	8000f54 <TIM_ClearITPendingBit>
		menubutton.button_state = NOT_ACTIVE;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <TIM3_IRQHandler+0x24>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	605a      	str	r2, [r3, #4]
		//handle button push havent quite figured it out yet

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	200000bc 	.word	0x200000bc

08001f90 <TIM4_IRQHandler>:


// Timer for debouncing selectors 50ms
void TIM4_IRQHandler(){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
		TIM_Cmd(TIM4, DISABLE);								//stop timer
 8001f94:	2100      	movs	r1, #0
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <TIM4_IRQHandler+0x1c>)
 8001f98:	f7fe ff98 	bl	8000ecc <TIM_Cmd>
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);			//clear interrupt
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4803      	ldr	r0, [pc, #12]	; (8001fac <TIM4_IRQHandler+0x1c>)
 8001fa0:	f7fe ffd8 	bl	8000f54 <TIM_ClearITPendingBit>
		update_selector_state();							//update state
 8001fa4:	f000 f8c2 	bl	800212c <update_selector_state>

}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40000800 	.word	0x40000800

08001fb0 <ADC_IRQHandler>:

// set up yet but might to see if the adc is working
void ADC_IRQHandler() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
        /* acknowledge interrupt */
        ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8001fb4:	f240 2105 	movw	r1, #517	; 0x205
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <ADC_IRQHandler+0x14>)
 8001fba:	f7fe fb4f 	bl	800065c <ADC_ClearITPendingBit>
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40012000 	.word	0x40012000

08001fc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fcc:	4a16      	ldr	r2, [pc, #88]	; (8002028 <SystemInit+0x60>)
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <SystemInit+0x60>)
 8001fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fdc:	4a13      	ldr	r2, [pc, #76]	; (800202c <SystemInit+0x64>)
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <SystemInit+0x64>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <SystemInit+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <SystemInit+0x64>)
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <SystemInit+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <SystemInit+0x64>)
 8002000:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <SystemInit+0x68>)
 8002002:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002004:	4a09      	ldr	r2, [pc, #36]	; (800202c <SystemInit+0x64>)
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <SystemInit+0x64>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <SystemInit+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002016:	f000 f80d 	bl	8002034 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800201a:	4b03      	ldr	r3, [pc, #12]	; (8002028 <SystemInit+0x60>)
 800201c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002020:	609a      	str	r2, [r3, #8]
#endif
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00
 800202c:	40023800 	.word	0x40023800
 8002030:	24003010 	.word	0x24003010

08002034 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002042:	4a36      	ldr	r2, [pc, #216]	; (800211c <SetSysClock+0xe8>)
 8002044:	4b35      	ldr	r3, [pc, #212]	; (800211c <SetSysClock+0xe8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <SetSysClock+0xe8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3301      	adds	r3, #1
 800205c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d103      	bne.n	800206c <SetSysClock+0x38>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800206a:	d1f0      	bne.n	800204e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800206c:	4b2b      	ldr	r3, [pc, #172]	; (800211c <SetSysClock+0xe8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002078:	2301      	movs	r3, #1
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	e001      	b.n	8002082 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d142      	bne.n	800210e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002088:	4a24      	ldr	r2, [pc, #144]	; (800211c <SetSysClock+0xe8>)
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <SetSysClock+0xe8>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002094:	4a22      	ldr	r2, [pc, #136]	; (8002120 <SetSysClock+0xec>)
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <SetSysClock+0xec>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800209e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80020a0:	4a1e      	ldr	r2, [pc, #120]	; (800211c <SetSysClock+0xe8>)
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <SetSysClock+0xe8>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80020a8:	4a1c      	ldr	r2, [pc, #112]	; (800211c <SetSysClock+0xe8>)
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <SetSysClock+0xe8>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80020b4:	4a19      	ldr	r2, [pc, #100]	; (800211c <SetSysClock+0xe8>)
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <SetSysClock+0xe8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80020be:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80020c0:	4b16      	ldr	r3, [pc, #88]	; (800211c <SetSysClock+0xe8>)
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <SetSysClock+0xf0>)
 80020c4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80020c6:	4a15      	ldr	r2, [pc, #84]	; (800211c <SetSysClock+0xe8>)
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <SetSysClock+0xe8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80020d2:	bf00      	nop
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <SetSysClock+0xe8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f9      	beq.n	80020d4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <SetSysClock+0xf4>)
 80020e2:	f240 6205 	movw	r2, #1541	; 0x605
 80020e6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80020e8:	4a0c      	ldr	r2, [pc, #48]	; (800211c <SetSysClock+0xe8>)
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <SetSysClock+0xe8>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80020f4:	4a09      	ldr	r2, [pc, #36]	; (800211c <SetSysClock+0xe8>)
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <SetSysClock+0xe8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002100:	bf00      	nop
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <SetSysClock+0xe8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b08      	cmp	r3, #8
 800210c:	d1f9      	bne.n	8002102 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40007000 	.word	0x40007000
 8002124:	07405408 	.word	0x07405408
 8002128:	40023c00 	.word	0x40023c00

0800212c <update_selector_state>:

/*
 * Gets and updated the state of both the selector rotary switches
 * This funtion is called by the tim2 interrupt handler
 */
void update_selector_state (){
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_7) == 1){
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	483b      	ldr	r0, [pc, #236]	; (8002220 <update_selector_state+0xf4>)
 8002134:	f7fe fd1c 	bl	8000b70 <GPIO_ReadInputDataBit>
 8002138:	4603      	mov	r3, r0
 800213a:	2b01      	cmp	r3, #1
 800213c:	d103      	bne.n	8002146 <update_selector_state+0x1a>
		vfo_state = sine;
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <update_selector_state+0xf8>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e02e      	b.n	80021a4 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_8) == 1){
 8002146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800214a:	4835      	ldr	r0, [pc, #212]	; (8002220 <update_selector_state+0xf4>)
 800214c:	f7fe fd10 	bl	8000b70 <GPIO_ReadInputDataBit>
 8002150:	4603      	mov	r3, r0
 8002152:	2b01      	cmp	r3, #1
 8002154:	d103      	bne.n	800215e <update_selector_state+0x32>
		vfo_state = sawtooth;
 8002156:	4b33      	ldr	r3, [pc, #204]	; (8002224 <update_selector_state+0xf8>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e022      	b.n	80021a4 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_9) == 1){
 800215e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002162:	482f      	ldr	r0, [pc, #188]	; (8002220 <update_selector_state+0xf4>)
 8002164:	f7fe fd04 	bl	8000b70 <GPIO_ReadInputDataBit>
 8002168:	4603      	mov	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	d103      	bne.n	8002176 <update_selector_state+0x4a>
		vfo_state = square;
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <update_selector_state+0xf8>)
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e016      	b.n	80021a4 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_10) == 1){
 8002176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217a:	4829      	ldr	r0, [pc, #164]	; (8002220 <update_selector_state+0xf4>)
 800217c:	f7fe fcf8 	bl	8000b70 <GPIO_ReadInputDataBit>
 8002180:	4603      	mov	r3, r0
 8002182:	2b01      	cmp	r3, #1
 8002184:	d103      	bne.n	800218e <update_selector_state+0x62>
		vfo_state = triangle;
 8002186:	4b27      	ldr	r3, [pc, #156]	; (8002224 <update_selector_state+0xf8>)
 8002188:	2203      	movs	r2, #3
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	e00a      	b.n	80021a4 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_11) == 1){
 800218e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002192:	4823      	ldr	r0, [pc, #140]	; (8002220 <update_selector_state+0xf4>)
 8002194:	f7fe fcec 	bl	8000b70 <GPIO_ReadInputDataBit>
 8002198:	4603      	mov	r3, r0
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <update_selector_state+0x78>
		vfo_state = other2;
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <update_selector_state+0xf8>)
 80021a0:	2204      	movs	r2, #4
 80021a2:	701a      	strb	r2, [r3, #0]
	}
//could put some fault detection at the end of these if statements come back later if theres time

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
 80021a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a8:	481d      	ldr	r0, [pc, #116]	; (8002220 <update_selector_state+0xf4>)
 80021aa:	f7fe fce1 	bl	8000b70 <GPIO_ReadInputDataBit>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d103      	bne.n	80021bc <update_selector_state+0x90>
		lfo_state = sine;
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <update_selector_state+0xfc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 80021ba:	e02e      	b.n	800221a <update_selector_state+0xee>
	}
//could put some fault detection at the end of these if statements come back later if theres time

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
 80021bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021c0:	4817      	ldr	r0, [pc, #92]	; (8002220 <update_selector_state+0xf4>)
 80021c2:	f7fe fcd5 	bl	8000b70 <GPIO_ReadInputDataBit>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d103      	bne.n	80021d4 <update_selector_state+0xa8>
		lfo_state = sawtooth;
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <update_selector_state+0xfc>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 80021d2:	e022      	b.n	800221a <update_selector_state+0xee>

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
 80021d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021d8:	4811      	ldr	r0, [pc, #68]	; (8002220 <update_selector_state+0xf4>)
 80021da:	f7fe fcc9 	bl	8000b70 <GPIO_ReadInputDataBit>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d103      	bne.n	80021ec <update_selector_state+0xc0>
		lfo_state = square;
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <update_selector_state+0xfc>)
 80021e6:	2202      	movs	r2, #2
 80021e8:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 80021ea:	e016      	b.n	800221a <update_selector_state+0xee>
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
		lfo_state = square;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
 80021ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <update_selector_state+0xf4>)
 80021f2:	f7fe fcbd 	bl	8000b70 <GPIO_ReadInputDataBit>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d103      	bne.n	8002204 <update_selector_state+0xd8>
		lfo_state = triangle;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <update_selector_state+0xfc>)
 80021fe:	2203      	movs	r2, #3
 8002200:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 8002202:	e00a      	b.n	800221a <update_selector_state+0xee>
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
		lfo_state = square;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
 8002204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002208:	4808      	ldr	r0, [pc, #32]	; (800222c <update_selector_state+0x100>)
 800220a:	f7fe fcb1 	bl	8000b70 <GPIO_ReadInputDataBit>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <update_selector_state+0xee>
		lfo_state = other2;
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <update_selector_state+0xfc>)
 8002216:	2204      	movs	r2, #4
 8002218:	701a      	strb	r2, [r3, #0]
	}
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	200000b8 	.word	0x200000b8
 8002228:	200000b9 	.word	0x200000b9
 800222c:	40020800 	.word	0x40020800

08002230 <__libc_init_array>:
 8002230:	b570      	push	{r4, r5, r6, lr}
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <__libc_init_array+0x3c>)
 8002234:	4c0e      	ldr	r4, [pc, #56]	; (8002270 <__libc_init_array+0x40>)
 8002236:	1ae4      	subs	r4, r4, r3
 8002238:	10a4      	asrs	r4, r4, #2
 800223a:	2500      	movs	r5, #0
 800223c:	461e      	mov	r6, r3
 800223e:	42a5      	cmp	r5, r4
 8002240:	d004      	beq.n	800224c <__libc_init_array+0x1c>
 8002242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002246:	4798      	blx	r3
 8002248:	3501      	adds	r5, #1
 800224a:	e7f8      	b.n	800223e <__libc_init_array+0xe>
 800224c:	f000 f816 	bl	800227c <_init>
 8002250:	4c08      	ldr	r4, [pc, #32]	; (8002274 <__libc_init_array+0x44>)
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <__libc_init_array+0x48>)
 8002254:	1ae4      	subs	r4, r4, r3
 8002256:	10a4      	asrs	r4, r4, #2
 8002258:	2500      	movs	r5, #0
 800225a:	461e      	mov	r6, r3
 800225c:	42a5      	cmp	r5, r4
 800225e:	d004      	beq.n	800226a <__libc_init_array+0x3a>
 8002260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002264:	4798      	blx	r3
 8002266:	3501      	adds	r5, #1
 8002268:	e7f8      	b.n	800225c <__libc_init_array+0x2c>
 800226a:	bd70      	pop	{r4, r5, r6, pc}
 800226c:	080022c4 	.word	0x080022c4
 8002270:	080022c4 	.word	0x080022c4
 8002274:	080022c8 	.word	0x080022c8
 8002278:	080022c4 	.word	0x080022c4

0800227c <_init>:
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227e:	bf00      	nop
 8002280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002282:	bc08      	pop	{r3}
 8002284:	469e      	mov	lr, r3
 8002286:	4770      	bx	lr

08002288 <_fini>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	bf00      	nop
 800228c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228e:	bc08      	pop	{r3}
 8002290:	469e      	mov	lr, r3
 8002292:	4770      	bx	lr
